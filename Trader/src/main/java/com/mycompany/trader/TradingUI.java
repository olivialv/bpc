/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.trader;

import com.google.gson.Gson;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.net.URL;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.CaretListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Olivia
 */
public class TradingUI extends javax.swing.JFrame {

    static String userId = null;
    static String sessionToken = null;
    static String accountId = null;
    static double eurusdBid = 0;
    static double eurusdAsk = 0;
    static double audusdBid = 0;
    static double audusdAsk = 0;
    static double gbpusdBid = 0;
    static double gbpusdAsk = 0;
    static double usdchfBid = 0;
    static double usdchfAsk = 0;
    static double usdcadBid = 0;
    static double usdcadAsk = 0;
    static double usdjpyBid = 0;
    static double usdjpyAsk = 0;
    static double pnl = 0;

    HTTPTransport httpTransport = null;
    GetResponse getResponse = null;
    int posselectedRowIndex = 0;
    int pendingselectedRowIndex = 0;
    String respondJson = "";
    Controller controller = null;
    WebsocketController websocket = null;
    MarketOrderRequest MktOrder = null;
    OrderReplaceRequest closeOrder = null;
    EditFilledOrderRequest editOrder = null;
    DefaultTableModel postableModel = null;
    DefaultTableModel closedtableModel = null;
    DefaultTableModel pendingtableModel = null;
    DefaultTableModel allTradetableModel = null;

    /**
     * Creates new form TradingUI
     */
    public TradingUI(Controller controller) throws Exception {

        initComponents();
        // change color
        //getContentPane().setBackground(new Color(13,68,132));

        this.controller = controller;
        sessionToken = controller.getSessionToken();
        accountId = controller.getAccountId();
        userId = controller.getUserId();
        httpTransport = new HTTPTransport();
        getResponse = new GetResponse();
        MktOrder = new MarketOrderRequest();
        closeOrder = new OrderReplaceRequest();
        editOrder = new EditFilledOrderRequest();
        websocket = new WebsocketController(userId, accountId, this);

        while (websocket.session == null) {
            Thread.sleep(50);
        }
        websocket.sendRequestForOpenPositions();

        postableModel = (DefaultTableModel) posTable.getModel();
        closedtableModel = (DefaultTableModel) closedOrderTable.getModel();
        pendingtableModel = (DefaultTableModel) pendingTable.getModel();
        allTradetableModel = (DefaultTableModel) allTradeTable.getModel();

        closeButton.setEnabled(false);
        cancelButton.setEnabled(false);
        posTableListener();
        dailyClosedTableListener();
        pendingTableListener();

    }

    TradingUI() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TradeMktDialog = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        mktTradeButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        mktDialogSymbol = new javax.swing.JComboBox();
        mktDialogSell = new javax.swing.JRadioButton();
        mktDialogBuy = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        mktDialogSize = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        mktDialogRate = new javax.swing.JLabel();
        mktDialogStop = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        mktLimitDiff = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        stopMktPrice = new javax.swing.JLabel();
        mktDialogLimit = new javax.swing.JCheckBox();
        limitMktPrice = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        mktLimitRate = new javax.swing.JSpinner();
        jSeparator5 = new javax.swing.JSeparator();
        mktStopRate = new javax.swing.JSpinner();
        mktStopDiff = new javax.swing.JSpinner();
        jLabel56 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        EntryDialog = new javax.swing.JDialog();
        jLabel26 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        entrySymbol = new javax.swing.JComboBox();
        entrySell = new javax.swing.JRadioButton();
        entryBuy = new javax.swing.JRadioButton();
        jLabel28 = new javax.swing.JLabel();
        entryPrice = new javax.swing.JSpinner();
        jLabel29 = new javax.swing.JLabel();
        entryStop = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        entryStopRate = new javax.swing.JSpinner();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        entryStopPrice = new javax.swing.JLabel();
        entryLimit = new javax.swing.JCheckBox();
        entryLimitPrice = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        entryLimitRate = new javax.swing.JSpinner();
        jSeparator6 = new javax.swing.JSeparator();
        entrySize = new javax.swing.JSpinner();
        jLabel58 = new javax.swing.JLabel();
        entryStopDiff = new javax.swing.JSpinner();
        entryLimitDiff = new javax.swing.JSpinner();
        jLabel57 = new javax.swing.JLabel();
        buttonGroup3 = new javax.swing.ButtonGroup();
        ChangePwDialog = new javax.swing.JDialog();
        jLabel50 = new javax.swing.JLabel();
        newPwField = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        newPwAgField = new javax.swing.JTextField();
        oldPwField = new javax.swing.JTextField();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        reportDialog = new javax.swing.JDialog();
        jPanel12 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        viewAllName = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        licenseDays1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        licenseDate2 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        administratorField = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        emailField = new javax.swing.JLabel();
        verifiedField = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        firstnameField = new javax.swing.JTextField();
        lastnameField = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        changeAddrField = new javax.swing.JTextArea();
        jLabel54 = new javax.swing.JLabel();
        changePhoneField = new javax.swing.JTextField();
        accountTables = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        allTradeTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        accStatTable = new javax.swing.JTable();
        accountDialog = new javax.swing.JDialog();
        jLabel19 = new javax.swing.JLabel();
        viewAllName1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lastnameLabel = new javax.swing.JLabel();
        firstnameLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        verifiedLabel = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        emailLabel1 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        licenseDays = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        licenseDate = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        licenseDate1 = new javax.swing.JLabel();
        ChangePw = new javax.swing.JDialog();
        jLabel33 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        editTradeDialog = new javax.swing.JDialog();
        editSymbol = new javax.swing.JLabel();
        editTradeOk = new javax.swing.JButton();
        editSide = new javax.swing.JLabel();
        editTradeCancel = new javax.swing.JButton();
        editSize = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        editRate = new javax.swing.JLabel();
        editStop = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        editLimitDiff = new javax.swing.JSpinner();
        jLabel60 = new javax.swing.JLabel();
        editStopGL = new javax.swing.JLabel();
        editStopMkt = new javax.swing.JLabel();
        editLimit = new javax.swing.JCheckBox();
        editLimitMkt = new javax.swing.JLabel();
        editLimitGL = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        editLimitRate = new javax.swing.JSpinner();
        jSeparator7 = new javax.swing.JSeparator();
        editStopRate = new javax.swing.JSpinner();
        editStopDiff = new javax.swing.JSpinner();
        jLabel64 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        sellButton = new javax.swing.JButton();
        buyButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        entryButton = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        myAccountButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        posTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        cancelAllButton = new javax.swing.JButton();
        allTable = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        pendingTable = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        cancelTable = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        closedOrderTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        eurusdPane = new javax.swing.JLayeredPane();
        eurusdBidButton = new javax.swing.JButton();
        eurusdQty = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        eurusdOfferButton = new javax.swing.JButton();
        jLayeredPane8 = new javax.swing.JLayeredPane();
        gbpusdBidButton = new javax.swing.JButton();
        gbpusdOfferButton = new javax.swing.JButton();
        gbpusdQty = new javax.swing.JSpinner();
        jLabel40 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLayeredPane9 = new javax.swing.JLayeredPane();
        usdjpyBidButton = new javax.swing.JButton();
        usdjpyOfferButton = new javax.swing.JButton();
        usdjpyQty = new javax.swing.JSpinner();
        jLabel41 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLayeredPane10 = new javax.swing.JLayeredPane();
        audusdBidButton = new javax.swing.JButton();
        audusdOfferButton = new javax.swing.JButton();
        audusdQty = new javax.swing.JSpinner();
        jLabel42 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLayeredPane11 = new javax.swing.JLayeredPane();
        usdcadBidButton = new javax.swing.JButton();
        usdcadOfferButton = new javax.swing.JButton();
        usdcadQty = new javax.swing.JSpinner();
        jLabel43 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLayeredPane12 = new javax.swing.JLayeredPane();
        usdchfBidButton = new javax.swing.JButton();
        usdchfOfferButton = new javax.swing.JButton();
        usdchfQty = new javax.swing.JSpinner();
        jLabel44 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        TradeMktDialog.setTitle("Create Market Order");
        TradeMktDialog.setBackground(new java.awt.Color(255, 255, 255));
        TradeMktDialog.setMinimumSize(new java.awt.Dimension(480, 500));
        TradeMktDialog.getContentPane().setLayout(null);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Symbol:");
        TradeMktDialog.getContentPane().add(jLabel3);
        jLabel3.setBounds(170, 20, 54, 17);

        mktTradeButton.setText("OK");
        mktTradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mktTradeButtonActionPerformed(evt);
            }
        });
        TradeMktDialog.getContentPane().add(mktTradeButton);
        mktTradeButton.setBounds(210, 400, 80, 35);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Sell/Buy:");
        TradeMktDialog.getContentPane().add(jLabel4);
        jLabel4.setBounds(170, 70, 59, 17);

        jButton11.setText("Cancel");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        TradeMktDialog.getContentPane().add(jButton11);
        jButton11.setBounds(320, 400, 80, 35);

        mktDialogSymbol.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mktDialogSymbol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EUR/USD", "GBP/USD", "USD/JPY", "AUD/USD", "USD/CAD", "USD/CHF" }));
        mktDialogSymbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mktDialogSymbolActionPerformed(evt);
            }
        });
        TradeMktDialog.getContentPane().add(mktDialogSymbol);
        mktDialogSymbol.setBounds(260, 20, 159, 27);

        mktDialogSell.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(mktDialogSell);
        mktDialogSell.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mktDialogSell.setText("Sell");
        mktDialogSell.setPreferredSize(new java.awt.Dimension(45, 30));
        mktDialogSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mktDialogSellActionPerformed(evt);
            }
        });
        TradeMktDialog.getContentPane().add(mktDialogSell);
        mktDialogSell.setBounds(260, 60, 45, 30);

        mktDialogBuy.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(mktDialogBuy);
        mktDialogBuy.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mktDialogBuy.setText("Buy");
        mktDialogBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mktDialogBuyActionPerformed(evt);
            }
        });
        TradeMktDialog.getContentPane().add(mktDialogBuy);
        mktDialogBuy.setBounds(320, 60, 56, 23);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Amount:");
        TradeMktDialog.getContentPane().add(jLabel5);
        jLabel5.setBounds(170, 110, 59, 17);

        mktDialogSize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));
        TradeMktDialog.getContentPane().add(mktDialogSize);
        mktDialogSize.setBounds(260, 110, 110, 28);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Rate:");
        TradeMktDialog.getContentPane().add(jLabel6);
        jLabel6.setBounds(170, 160, 34, 17);

        mktDialogRate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mktDialogRate.setText("1.2365");
        mktDialogRate.setPreferredSize(new java.awt.Dimension(43, 25));
        TradeMktDialog.getContentPane().add(mktDialogRate);
        mktDialogRate.setBounds(260, 160, 90, 25);

        mktDialogStop.setBackground(new java.awt.Color(255, 255, 255));
        mktDialogStop.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mktDialogStop.setText("Stop:");
        mktDialogStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mktDialogStopActionPerformed(evt);
            }
        });
        TradeMktDialog.getContentPane().add(mktDialogStop);
        mktDialogStop.setBounds(170, 200, 67, 23);
        TradeMktDialog.getContentPane().add(jSeparator1);
        jSeparator1.setBounds(230, 220, 211, 10);

        mktLimitDiff.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        TradeMktDialog.getContentPane().add(mktLimitDiff);
        mktLimitDiff.setBounds(380, 340, 60, 28);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Rate:");
        TradeMktDialog.getContentPane().add(jLabel8);
        jLabel8.setBounds(170, 250, 34, 17);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText(">");
        TradeMktDialog.getContentPane().add(jLabel9);
        jLabel9.setBounds(300, 250, 11, 17);

        stopMktPrice.setBackground(new java.awt.Color(255, 255, 255));
        stopMktPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        stopMktPrice.setText("1.2369");
        TradeMktDialog.getContentPane().add(stopMktPrice);
        stopMktPrice.setBounds(310, 250, 60, 17);

        mktDialogLimit.setBackground(new java.awt.Color(255, 255, 255));
        mktDialogLimit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mktDialogLimit.setText("Limit:");
        mktDialogLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mktDialogLimitActionPerformed(evt);
            }
        });
        TradeMktDialog.getContentPane().add(mktDialogLimit);
        mktDialogLimit.setBounds(170, 290, 69, 23);

        limitMktPrice.setBackground(new java.awt.Color(255, 255, 255));
        limitMktPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        limitMktPrice.setText("1.2369");
        TradeMktDialog.getContentPane().add(limitMktPrice);
        limitMktPrice.setBounds(310, 340, 60, 17);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("<");
        TradeMktDialog.getContentPane().add(jLabel12);
        jLabel12.setBounds(300, 340, 11, 17);

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel25.setText("Rate:");
        TradeMktDialog.getContentPane().add(jLabel25);
        jLabel25.setBounds(170, 340, 34, 17);

        mktLimitRate.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        TradeMktDialog.getContentPane().add(mktLimitRate);
        mktLimitRate.setBounds(210, 340, 82, 28);
        TradeMktDialog.getContentPane().add(jSeparator5);
        jSeparator5.setBounds(230, 310, 211, 10);

        mktStopRate.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        TradeMktDialog.getContentPane().add(mktStopRate);
        mktStopRate.setBounds(210, 250, 80, 28);

        mktStopDiff.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        TradeMktDialog.getContentPane().add(mktStopDiff);
        mktStopDiff.setBounds(380, 250, 60, 28);

        jLabel56.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dollar-1.png"))); // NOI18N
        TradeMktDialog.getContentPane().add(jLabel56);
        jLabel56.setBounds(20, 50, 120, 120);

        jLabel55.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.jpg"))); // NOI18N
        TradeMktDialog.getContentPane().add(jLabel55);
        jLabel55.setBounds(0, 0, 480, 549);

        EntryDialog.setTitle("Create Entry Order");
        EntryDialog.setMinimumSize(new java.awt.Dimension(480, 520));
        EntryDialog.getContentPane().setLayout(null);

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel26.setText("Symbol:");
        EntryDialog.getContentPane().add(jLabel26);
        jLabel26.setBounds(180, 40, 54, 17);

        jButton12.setText("OK");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        EntryDialog.getContentPane().add(jButton12);
        jButton12.setBounds(220, 420, 80, 35);

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel27.setText("Sell/Buy:");
        EntryDialog.getContentPane().add(jLabel27);
        jLabel27.setBounds(180, 80, 59, 17);

        jButton13.setText("Cancel");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        EntryDialog.getContentPane().add(jButton13);
        jButton13.setBounds(330, 420, 80, 35);

        entrySymbol.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entrySymbol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EUR/USD", "GBP/USD", "USD/JPY", "AUD/USD", "USD/CAD", "USD/CHF" }));
        entrySymbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrySymbolActionPerformed(evt);
            }
        });
        EntryDialog.getContentPane().add(entrySymbol);
        entrySymbol.setBounds(270, 40, 159, 27);

        entrySell.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(entrySell);
        entrySell.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entrySell.setSelected(true);
        entrySell.setText("Sell");
        entrySell.setPreferredSize(new java.awt.Dimension(45, 30));
        entrySell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrySellActionPerformed(evt);
            }
        });
        EntryDialog.getContentPane().add(entrySell);
        entrySell.setBounds(270, 80, 45, 30);

        entryBuy.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup3.add(entryBuy);
        entryBuy.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entryBuy.setText("Buy");
        entryBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryBuyActionPerformed(evt);
            }
        });
        EntryDialog.getContentPane().add(entryBuy);
        entryBuy.setBounds(340, 80, 56, 23);

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel28.setText("Amount:");
        EntryDialog.getContentPane().add(jLabel28);
        jLabel28.setBounds(180, 130, 59, 17);

        entryPrice.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        EntryDialog.getContentPane().add(entryPrice);
        entryPrice.setBounds(270, 170, 120, 28);

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel29.setText("Rate:");
        EntryDialog.getContentPane().add(jLabel29);
        jLabel29.setBounds(180, 180, 34, 17);

        entryStop.setBackground(new java.awt.Color(255, 255, 255));
        entryStop.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entryStop.setText("Stop:");
        entryStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryStopActionPerformed(evt);
            }
        });
        EntryDialog.getContentPane().add(entryStop);
        entryStop.setBounds(180, 220, 67, 23);
        EntryDialog.getContentPane().add(jSeparator2);
        jSeparator2.setBounds(240, 240, 211, 10);

        entryStopRate.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        EntryDialog.getContentPane().add(entryStopRate);
        entryStopRate.setBounds(220, 270, 82, 28);

        jLabel31.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel31.setText("Rate:");
        EntryDialog.getContentPane().add(jLabel31);
        jLabel31.setBounds(180, 270, 34, 17);

        jLabel32.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel32.setText(">");
        EntryDialog.getContentPane().add(jLabel32);
        jLabel32.setBounds(310, 270, 11, 17);

        entryStopPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entryStopPrice.setText("1.2369");
        EntryDialog.getContentPane().add(entryStopPrice);
        entryStopPrice.setBounds(320, 270, 60, 17);

        entryLimit.setBackground(new java.awt.Color(255, 255, 255));
        entryLimit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entryLimit.setText("Limit:");
        entryLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryLimitActionPerformed(evt);
            }
        });
        EntryDialog.getContentPane().add(entryLimit);
        entryLimit.setBounds(180, 310, 69, 23);

        entryLimitPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        entryLimitPrice.setText("1.2369");
        EntryDialog.getContentPane().add(entryLimitPrice);
        entryLimitPrice.setBounds(320, 360, 60, 17);

        jLabel35.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel35.setText("<");
        EntryDialog.getContentPane().add(jLabel35);
        jLabel35.setBounds(310, 360, 11, 17);

        jLabel36.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel36.setText("Rate:");
        EntryDialog.getContentPane().add(jLabel36);
        jLabel36.setBounds(180, 360, 34, 17);

        entryLimitRate.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        EntryDialog.getContentPane().add(entryLimitRate);
        entryLimitRate.setBounds(220, 360, 82, 28);
        EntryDialog.getContentPane().add(jSeparator6);
        jSeparator6.setBounds(240, 330, 211, 10);

        entrySize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));
        EntryDialog.getContentPane().add(entrySize);
        entrySize.setBounds(270, 130, 120, 28);

        jLabel58.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dollar-1.png"))); // NOI18N
        EntryDialog.getContentPane().add(jLabel58);
        jLabel58.setBounds(20, 50, 120, 120);

        entryStopDiff.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        EntryDialog.getContentPane().add(entryStopDiff);
        entryStopDiff.setBounds(380, 270, 70, 28);

        entryLimitDiff.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        EntryDialog.getContentPane().add(entryLimitDiff);
        entryLimitDiff.setBounds(380, 360, 70, 28);

        jLabel57.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.jpg"))); // NOI18N
        EntryDialog.getContentPane().add(jLabel57);
        jLabel57.setBounds(0, 0, 490, 550);

        ChangePwDialog.setTitle("Change Password");
        ChangePwDialog.setMinimumSize(new java.awt.Dimension(533, 220));

        jLabel50.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel50.setText("Old Password:");

        jLabel51.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel51.setText("New Password:");

        jLabel52.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel52.setText("Re-enter New Password:");

        jButton17.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton17.setText("OK");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton18.setText("Cancel");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ChangePwDialogLayout = new javax.swing.GroupLayout(ChangePwDialog.getContentPane());
        ChangePwDialog.getContentPane().setLayout(ChangePwDialogLayout);
        ChangePwDialogLayout.setHorizontalGroup(
            ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChangePwDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChangePwDialogLayout.createSequentialGroup()
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel52)
                        .addGroup(ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newPwAgField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChangePwDialogLayout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addGap(89, 89, 89)
                                .addComponent(oldPwField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChangePwDialogLayout.createSequentialGroup()
                                .addComponent(jLabel51)
                                .addGap(84, 84, 84)
                                .addComponent(newPwField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(39, 39, 39))
        );
        ChangePwDialogLayout.setVerticalGroup(
            ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChangePwDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ChangePwDialogLayout.createSequentialGroup()
                        .addGroup(ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(oldPwField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel50))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPwField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel51))
                        .addGap(13, 13, 13)
                        .addGroup(ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPwAgField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel52)))
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ChangePwDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(jButton18))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reportDialog.setTitle("My Account");
        reportDialog.setBackground(new java.awt.Color(255, 255, 255));
        reportDialog.setMinimumSize(new java.awt.Dimension(1131, 720));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Account Details", 0, 0, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel18.setText(" ");

        viewAllName.setBackground(new java.awt.Color(255, 255, 255));
        viewAllName.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        viewAllName.setText("Username");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel24.setText("Days Remaining of License:");

        licenseDays1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        licenseDays1.setText("15 Days");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("First Name:");

        jLabel37.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel37.setText("License Expire Date:");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("Last Name:");

        licenseDate2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        licenseDate2.setText("25/12/2015");

        jLabel38.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel38.setText("Administrator:");

        administratorField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        administratorField.setText("Adam Hardie");

        jLabel39.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel39.setText("Email:");

        emailField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        emailField.setText("firstname.lastname@gmail.com");

        verifiedField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        verifiedField.setText("Not Verified");

        jLabel53.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel53.setText("Address:");

        firstnameField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        firstnameField.setText("Firstname");

        lastnameField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lastnameField.setText("Lastname");

        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton10.setText("Update");
        jButton10.setPreferredSize(new java.awt.Dimension(51, 30));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        changeAddrField.setColumns(20);
        changeAddrField.setRows(5);
        jScrollPane7.setViewportView(changeAddrField);

        jLabel54.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel54.setText("Contact:");

        changePhoneField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewAllName, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(firstnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jLabel37)
                            .addComponent(jLabel38))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(licenseDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(licenseDays1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(administratorField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18))
                                .addGroup(jPanel12Layout.createSequentialGroup()
                                    .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(44, 44, 44)))
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(changePhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lastnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel12Layout.createSequentialGroup()
                                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(verifiedField))
                                .addComponent(jScrollPane7)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(viewAllName, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastnameField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verifiedField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changePhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(licenseDays1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(licenseDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(administratorField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        accountTables.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        allTradeTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        allTradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Open Time", "Close Time", "Symbol", "Size", "B/S", "Open Price", "Close Price", "P&L"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allTradeTable.setRowHeight(25);
        jScrollPane2.setViewportView(allTradeTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addContainerGap())
        );

        accountTables.addTab("All Trades", jPanel4);

        accStatTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        accStatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Description", "In", "Out", "Balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accStatTable.setRowHeight(25);
        jScrollPane3.setViewportView(accStatTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addContainerGap())
        );

        accountTables.addTab("Account Statement", jPanel5);

        javax.swing.GroupLayout reportDialogLayout = new javax.swing.GroupLayout(reportDialog.getContentPane());
        reportDialog.getContentPane().setLayout(reportDialogLayout);
        reportDialogLayout.setHorizontalGroup(
            reportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountTables)
                .addContainerGap())
        );
        reportDialogLayout.setVerticalGroup(
            reportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(accountTables, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        accountDialog.setTitle("View All Orders");
        accountDialog.setBackground(new java.awt.Color(255, 255, 255));
        accountDialog.setMinimumSize(new java.awt.Dimension(588, 439));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel19.setText(" ");

        viewAllName1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        viewAllName1.setText("Username");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("First Name:");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Last Name:");

        lastnameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lastnameLabel.setText("Lastname");

        firstnameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        firstnameLabel.setText("Firstname");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Email:");

        emailLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        emailLabel.setText("firstname.lastname@gmail.com");

        verifiedLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        verifiedLabel.setText("Verified");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setText("Address:");

        emailLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        emailLabel1.setText("123 Fake Street, London");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setText("Days Remaining of License:");

        licenseDays.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        licenseDays.setText("15 Days");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setText("License Expire Date:");

        licenseDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        licenseDate.setText("25/12/2015");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setText("Administrator:");

        licenseDate1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        licenseDate1.setText("Adam Hardie");

        javax.swing.GroupLayout accountDialogLayout = new javax.swing.GroupLayout(accountDialog.getContentPane());
        accountDialog.getContentPane().setLayout(accountDialogLayout);
        accountDialogLayout.setHorizontalGroup(
            accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewAllName1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(accountDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addGroup(accountDialogLayout.createSequentialGroup()
                        .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountDialogLayout.createSequentialGroup()
                                .addComponent(firstnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lastnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(emailLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountDialogLayout.createSequentialGroup()
                                .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(verifiedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(accountDialogLayout.createSequentialGroup()
                        .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22))
                        .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(accountDialogLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(licenseDays, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(accountDialogLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(licenseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(licenseDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
        );
        accountDialogLayout.setVerticalGroup(
            accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountDialogLayout.createSequentialGroup()
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(accountDialogLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(viewAllName1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verifiedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(licenseDays, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(licenseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(licenseDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        ChangePw.setTitle("Change Password");
        ChangePw.setMinimumSize(new java.awt.Dimension(437, 157));

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lockandkeys.png"))); // NOI18N

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Click Here To Change Your Password");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ChangePwLayout = new javax.swing.GroupLayout(ChangePw.getContentPane());
        ChangePw.getContentPane().setLayout(ChangePwLayout);
        ChangePwLayout.setHorizontalGroup(
            ChangePwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChangePwLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        ChangePwLayout.setVerticalGroup(
            ChangePwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChangePwLayout.createSequentialGroup()
                .addGroup(ChangePwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ChangePwLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ChangePwLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        editTradeDialog.setTitle("Edit Existing Order");
        editTradeDialog.setBackground(new java.awt.Color(255, 255, 255));
        editTradeDialog.setMinimumSize(new java.awt.Dimension(480, 500));
        editTradeDialog.setPreferredSize(new java.awt.Dimension(480, 500));
        editTradeDialog.getContentPane().setLayout(null);

        editSymbol.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editTradeDialog.getContentPane().add(editSymbol);
        editSymbol.setBounds(260, 20, 120, 20);

        editTradeOk.setText("OK");
        editTradeOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTradeOkActionPerformed(evt);
            }
        });
        editTradeDialog.getContentPane().add(editTradeOk);
        editTradeOk.setBounds(210, 400, 80, 35);

        editSide.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editTradeDialog.getContentPane().add(editSide);
        editSide.setBounds(260, 70, 140, 20);

        editTradeCancel.setText("Cancel");
        editTradeCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTradeCancelActionPerformed(evt);
            }
        });
        editTradeDialog.getContentPane().add(editTradeCancel);
        editTradeCancel.setBounds(320, 400, 80, 35);

        editSize.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editTradeDialog.getContentPane().add(editSize);
        editSize.setBounds(260, 110, 100, 20);

        jLabel59.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel59.setText("Rate:");
        editTradeDialog.getContentPane().add(jLabel59);
        jLabel59.setBounds(170, 160, 34, 17);

        editRate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editRate.setText("1.2365");
        editRate.setPreferredSize(new java.awt.Dimension(43, 25));
        editTradeDialog.getContentPane().add(editRate);
        editRate.setBounds(260, 160, 90, 25);

        editStop.setBackground(new java.awt.Color(255, 255, 255));
        editStop.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editStop.setText("Stop:");
        editStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editStopActionPerformed(evt);
            }
        });
        editTradeDialog.getContentPane().add(editStop);
        editStop.setBounds(170, 200, 67, 23);
        editTradeDialog.getContentPane().add(jSeparator3);
        jSeparator3.setBounds(230, 220, 211, 10);

        editLimitDiff.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        editTradeDialog.getContentPane().add(editLimitDiff);
        editLimitDiff.setBounds(380, 340, 60, 28);

        jLabel60.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel60.setText("Rate:");
        editTradeDialog.getContentPane().add(jLabel60);
        jLabel60.setBounds(170, 250, 34, 17);

        editStopGL.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editStopGL.setText(">");
        editTradeDialog.getContentPane().add(editStopGL);
        editStopGL.setBounds(300, 250, 11, 17);

        editStopMkt.setBackground(new java.awt.Color(255, 255, 255));
        editStopMkt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editStopMkt.setText("1.2369");
        editTradeDialog.getContentPane().add(editStopMkt);
        editStopMkt.setBounds(310, 250, 60, 17);

        editLimit.setBackground(new java.awt.Color(255, 255, 255));
        editLimit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editLimit.setText("Limit:");
        editLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLimitActionPerformed(evt);
            }
        });
        editTradeDialog.getContentPane().add(editLimit);
        editLimit.setBounds(170, 290, 69, 23);

        editLimitMkt.setBackground(new java.awt.Color(255, 255, 255));
        editLimitMkt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editLimitMkt.setText("1.2369");
        editTradeDialog.getContentPane().add(editLimitMkt);
        editLimitMkt.setBounds(310, 340, 60, 17);

        editLimitGL.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editLimitGL.setText("<");
        editTradeDialog.getContentPane().add(editLimitGL);
        editLimitGL.setBounds(300, 340, 11, 17);

        jLabel63.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel63.setText("Rate:");
        editTradeDialog.getContentPane().add(jLabel63);
        jLabel63.setBounds(170, 340, 34, 17);

        editLimitRate.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        editTradeDialog.getContentPane().add(editLimitRate);
        editLimitRate.setBounds(210, 340, 82, 28);
        editTradeDialog.getContentPane().add(jSeparator7);
        jSeparator7.setBounds(230, 310, 211, 10);

        editStopRate.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        editTradeDialog.getContentPane().add(editStopRate);
        editStopRate.setBounds(210, 250, 80, 28);

        editStopDiff.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        editTradeDialog.getContentPane().add(editStopDiff);
        editStopDiff.setBounds(380, 250, 60, 28);

        jLabel64.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dollar-1.png"))); // NOI18N
        editTradeDialog.getContentPane().add(jLabel64);
        jLabel64.setBounds(20, 50, 120, 120);

        jLabel66.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel66.setText("Symbol:");
        editTradeDialog.getContentPane().add(jLabel66);
        jLabel66.setBounds(170, 20, 54, 17);

        jLabel67.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel67.setText("Sell/Buy:");
        editTradeDialog.getContentPane().add(jLabel67);
        jLabel67.setBounds(170, 70, 59, 17);

        jLabel68.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel68.setText("Amount:");
        editTradeDialog.getContentPane().add(jLabel68);
        jLabel68.setBounds(170, 110, 59, 17);

        jLabel65.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.jpg"))); // NOI18N
        editTradeDialog.getContentPane().add(jLabel65);
        jLabel65.setBounds(0, 0, 480, 549);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BlueprintCapital FX Trading Paltform v 1.0");
        setBackground(new java.awt.Color(102, 142, 168));
        setMinimumSize(new java.awt.Dimension(1480, 820));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(240, 240, 240, 80));

        sellButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        sellButton.setForeground(new java.awt.Color(13, 68, 132));
        sellButton.setText("Sell");
        sellButton.setPreferredSize(new java.awt.Dimension(51, 30));
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        buyButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buyButton.setForeground(new java.awt.Color(13, 68, 132));
        buyButton.setText("Buy");
        buyButton.setPreferredSize(new java.awt.Dimension(51, 30));
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        closeButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        closeButton.setForeground(new java.awt.Color(13, 68, 132));
        closeButton.setText("Close");
        closeButton.setPreferredSize(new java.awt.Dimension(51, 30));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        entryButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        entryButton.setForeground(new java.awt.Color(13, 68, 132));
        entryButton.setText("Entry");
        entryButton.setPreferredSize(new java.awt.Dimension(51, 30));
        entryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryButtonActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(13, 68, 132));
        jButton6.setText("Edit Trade");
        jButton6.setPreferredSize(new java.awt.Dimension(51, 30));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(13, 68, 132));
        jButton8.setText("Logout");
        jButton8.setPreferredSize(new java.awt.Dimension(51, 30));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        myAccountButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        myAccountButton.setForeground(new java.awt.Color(13, 68, 132));
        myAccountButton.setText("My Account");
        myAccountButton.setPreferredSize(new java.awt.Dimension(51, 30));
        myAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myAccountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 771, Short.MAX_VALUE)
                .addComponent(myAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(myAccountButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(entryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(sellButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1480, 47);

        jPanel3.setBackground(new java.awt.Color(240, 240, 240, 80));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Open Positions", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel3.setMinimumSize(new java.awt.Dimension(690, 370));
        jPanel3.setPreferredSize(new java.awt.Dimension(690, 389));

        posTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        posTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Trade Time", "Symbol", "Size", "B/S", "Price", "Stop", "Limit", "P&L"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        posTable.setRowHeight(25);
        jScrollPane1.setViewportView(posTable);
        posTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        posTable.getTableHeader().setBackground(new java.awt.Color(202,219,236));
        posTable.getTableHeader().setPreferredSize(new Dimension(450,28));

        TableColumnModel columnModel = posTable.getColumnModel();

        columnModel.getColumn(1).setPreferredWidth(60);
        columnModel.getColumn(3).setPreferredWidth(40);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(760, 58, 690, 370);

        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(13, 68, 132));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton);
        cancelButton.setBounds(1220, 450, 100, 30);

        cancelAllButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cancelAllButton.setForeground(new java.awt.Color(13, 68, 132));
        cancelAllButton.setText("Cancel All");
        cancelAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAllButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelAllButton);
        cancelAllButton.setBounds(1330, 450, 100, 30);

        allTable.setBackground(new java.awt.Color(102, 142, 168));
        allTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jScrollPane4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane4.setPreferredSize(new java.awt.Dimension(452, 200));

        pendingTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        pendingTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", 0, 14));
        pendingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trade Time", "Symbol", "Size", "B/S", "Price", "Stop", "Limit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pendingTable.setRowHeight(25);
        pendingTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(pendingTable);
        pendingTable.getTableHeader().setBackground(new java.awt.Color(202,219,236));
        pendingTable.getTableHeader().setPreferredSize(new Dimension(1435,28));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1435, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );

        allTable.addTab("Pending Orders", jPanel7);

        jScrollPane5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane5.setPreferredSize(new java.awt.Dimension(452, 200));

        cancelTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cancelTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", 0, 14));
        cancelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Trade Time", "Cancelled Time", "Symbol", "Size", "B/S", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cancelTable.setRowHeight(25);
        cancelTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(cancelTable);
        cancelTable.getTableHeader().setBackground(new java.awt.Color(202,219,236));
        cancelTable.getTableHeader().setPreferredSize(new Dimension(1435,28));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1435, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );

        allTable.addTab("Cancelled Orders", jPanel8);

        jScrollPane6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane6.setPreferredSize(new java.awt.Dimension(452, 200));

        closedOrderTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        closedOrderTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", 0, 14));
        closedOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Open Time", "Close Time", "Symbol", "Size", "B/S", "Open Price", "Close Price", "P&L"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        closedOrderTable.setRowHeight(25);
        closedOrderTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(closedOrderTable);
        closedOrderTable.getTableHeader().setBackground(new java.awt.Color(202,219,236));
        closedOrderTable.getTableHeader().setPreferredSize(new Dimension(1435,28));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1435, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );

        allTable.addTab("Closed Orders", jPanel9);

        getContentPane().add(allTable);
        allTable.setBounds(10, 460, 1440, 280);

        jPanel2.setBackground(new java.awt.Color(246, 249, 252));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Advanced Dealing Rates", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(13, 68, 132))); // NOI18N

        eurusdPane.setBackground(new java.awt.Color(255, 255, 255));
        eurusdPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EUR/USD", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(13, 68, 132))); // NOI18N

        eurusdBidButton.setBackground(new java.awt.Color(204, 0, 0));
        eurusdBidButton.setFont(new java.awt.Font("Segoe UI", 0, 14));
        eurusdBidButton.setForeground(new java.awt.Color(255, 255, 255));
        eurusdBidButton.setText("SELL");
        eurusdBidButton.setBorder(null);
        eurusdBidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eurusdBidButtonActionPerformed(evt);
            }
        });

        eurusdQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        eurusdQty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));

        jLabel1.setBackground(new java.awt.Color(245, 245, 245));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(13, 68, 132));
        jLabel1.setText(" SELL");

        jLabel2.setBackground(new java.awt.Color(204, 0, 0));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(13, 68, 132));
        jLabel2.setText("BUY");

        eurusdOfferButton.setBackground(new java.awt.Color(0, 153, 0));
        eurusdOfferButton.setFont(new java.awt.Font("Segoe UI", 0, 14));
        eurusdOfferButton.setForeground(new java.awt.Color(255, 255, 255));
        eurusdOfferButton.setText("BUY");
        eurusdOfferButton.setBorder(null);
        eurusdOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eurusdOfferButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eurusdPaneLayout = new javax.swing.GroupLayout(eurusdPane);
        eurusdPane.setLayout(eurusdPaneLayout);
        eurusdPaneLayout.setHorizontalGroup(
            eurusdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eurusdPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eurusdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(eurusdPaneLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eurusdQty, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(eurusdPaneLayout.createSequentialGroup()
                        .addComponent(eurusdBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eurusdOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        eurusdPaneLayout.setVerticalGroup(
            eurusdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eurusdPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eurusdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eurusdBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eurusdOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(eurusdPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eurusdQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        eurusdPane.setLayer(eurusdBidButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        eurusdPane.setLayer(eurusdQty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        eurusdPane.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        eurusdPane.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        eurusdPane.setLayer(eurusdOfferButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GBP/USD", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(13, 68, 132))); // NOI18N

        gbpusdBidButton.setBackground(new java.awt.Color(204, 0, 0));
        gbpusdBidButton.setFont(new java.awt.Font("Segoe UI", 0, 14));
        gbpusdBidButton.setForeground(new java.awt.Color(255, 255, 255));
        gbpusdBidButton.setText("SELL");
        gbpusdBidButton.setBorder(null);
        gbpusdBidButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gbpusdBidButton.setMaximumSize(new java.awt.Dimension(67, 29));
        gbpusdBidButton.setMinimumSize(new java.awt.Dimension(67, 29));
        gbpusdBidButton.setPreferredSize(new java.awt.Dimension(67, 29));
        gbpusdBidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gbpusdBidButtonActionPerformed(evt);
            }
        });

        gbpusdOfferButton.setBackground(new java.awt.Color(0, 153, 0));
        gbpusdOfferButton.setFont(new java.awt.Font("Segoe UI", 0, 14));
        gbpusdOfferButton.setForeground(new java.awt.Color(255, 255, 255));
        gbpusdOfferButton.setText("BUY");
        gbpusdOfferButton.setToolTipText("");
        gbpusdOfferButton.setBorder(null);
        gbpusdOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gbpusdOfferButtonActionPerformed(evt);
            }
        });

        gbpusdQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        gbpusdQty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));

        jLabel40.setBackground(new java.awt.Color(245, 245, 245));
        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(13, 68, 132));
        jLabel40.setText(" SELL");

        jLabel45.setBackground(new java.awt.Color(204, 0, 0));
        jLabel45.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(13, 68, 132));
        jLabel45.setText("BUY");

        javax.swing.GroupLayout jLayeredPane8Layout = new javax.swing.GroupLayout(jLayeredPane8);
        jLayeredPane8.setLayout(jLayeredPane8Layout);
        jLayeredPane8Layout.setHorizontalGroup(
            jLayeredPane8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane8Layout.createSequentialGroup()
                        .addComponent(gbpusdBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gbpusdOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jLayeredPane8Layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addComponent(jLabel40)
                        .addGap(18, 18, 18)
                        .addComponent(gbpusdQty, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7))))
        );
        jLayeredPane8Layout.setVerticalGroup(
            jLayeredPane8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gbpusdBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gbpusdOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gbpusdQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jLayeredPane8.setLayer(gbpusdBidButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane8.setLayer(gbpusdOfferButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane8.setLayer(gbpusdQty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane8.setLayer(jLabel40, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane8.setLayer(jLabel45, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane9.setBackground(new java.awt.Color(13, 68, 132));
        jLayeredPane9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "USD/JPY", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(13, 68, 132))); // NOI18N

        usdjpyBidButton.setBackground(new java.awt.Color(204, 0, 0));
        usdjpyBidButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdjpyBidButton.setForeground(new java.awt.Color(255, 255, 255));
        usdjpyBidButton.setText("SELL");
        usdjpyBidButton.setBorder(null);
        usdjpyBidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usdjpyBidButtonActionPerformed(evt);
            }
        });

        usdjpyOfferButton.setBackground(new java.awt.Color(0, 153, 0));
        usdjpyOfferButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdjpyOfferButton.setForeground(new java.awt.Color(255, 255, 255));
        usdjpyOfferButton.setText("BUY");
        usdjpyOfferButton.setToolTipText("");
        usdjpyOfferButton.setBorder(null);
        usdjpyOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usdjpyOfferButtonActionPerformed(evt);
            }
        });

        usdjpyQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdjpyQty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));

        jLabel41.setBackground(new java.awt.Color(245, 245, 245));
        jLabel41.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(13, 68, 132));
        jLabel41.setText(" SELL");

        jLabel46.setBackground(new java.awt.Color(204, 0, 0));
        jLabel46.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(13, 68, 132));
        jLabel46.setText("BUY");

        javax.swing.GroupLayout jLayeredPane9Layout = new javax.swing.GroupLayout(jLayeredPane9);
        jLayeredPane9.setLayout(jLayeredPane9Layout);
        jLayeredPane9Layout.setHorizontalGroup(
            jLayeredPane9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane9Layout.createSequentialGroup()
                        .addComponent(usdjpyBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usdjpyOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jLayeredPane9Layout.createSequentialGroup()
                        .addComponent(jLabel41)
                        .addGap(15, 15, 15)
                        .addComponent(usdjpyQty, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jLayeredPane9Layout.setVerticalGroup(
            jLayeredPane9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usdjpyBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usdjpyOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usdjpyQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel46))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jLayeredPane9.setLayer(usdjpyBidButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane9.setLayer(usdjpyOfferButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane9.setLayer(usdjpyQty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane9.setLayer(jLabel41, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane9.setLayer(jLabel46, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "AUD/USD", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(13, 68, 132))); // NOI18N

        audusdBidButton.setBackground(new java.awt.Color(204, 0, 0));
        audusdBidButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        audusdBidButton.setForeground(new java.awt.Color(255, 255, 255));
        audusdBidButton.setText("SELL");
        audusdBidButton.setBorder(null);
        audusdBidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audusdBidButtonActionPerformed(evt);
            }
        });

        audusdOfferButton.setBackground(new java.awt.Color(0, 153, 0));
        audusdOfferButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        audusdOfferButton.setForeground(new java.awt.Color(255, 255, 255));
        audusdOfferButton.setText("BUY");
        audusdOfferButton.setToolTipText("");
        audusdOfferButton.setBorder(null);
        audusdOfferButton.setPreferredSize(new java.awt.Dimension(55, 23));
        audusdOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audusdOfferButtonActionPerformed(evt);
            }
        });

        audusdQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        audusdQty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));

        jLabel42.setBackground(new java.awt.Color(245, 245, 245));
        jLabel42.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(13, 68, 132));
        jLabel42.setText(" SELL");

        jLabel47.setBackground(new java.awt.Color(204, 0, 0));
        jLabel47.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(13, 68, 132));
        jLabel47.setText("BUY");

        javax.swing.GroupLayout jLayeredPane10Layout = new javax.swing.GroupLayout(jLayeredPane10);
        jLayeredPane10.setLayout(jLayeredPane10Layout);
        jLayeredPane10Layout.setHorizontalGroup(
            jLayeredPane10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane10Layout.createSequentialGroup()
                .addGroup(jLayeredPane10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(audusdBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(audusdOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLayeredPane10Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(audusdQty, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 11, Short.MAX_VALUE))
        );
        jLayeredPane10Layout.setVerticalGroup(
            jLayeredPane10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(audusdBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(audusdOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(audusdQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47)
                    .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 11, Short.MAX_VALUE))
        );
        jLayeredPane10.setLayer(audusdBidButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane10.setLayer(audusdOfferButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane10.setLayer(audusdQty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane10.setLayer(jLabel42, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane10.setLayer(jLabel47, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "USD/CAD", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(13, 68, 132))); // NOI18N

        usdcadBidButton.setBackground(new java.awt.Color(204, 0, 0));
        usdcadBidButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdcadBidButton.setForeground(new java.awt.Color(255, 255, 255));
        usdcadBidButton.setText("SELL");
        usdcadBidButton.setBorder(null);
        usdcadBidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usdcadBidButtonActionPerformed(evt);
            }
        });

        usdcadOfferButton.setBackground(new java.awt.Color(0, 153, 0));
        usdcadOfferButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdcadOfferButton.setForeground(new java.awt.Color(255, 255, 255));
        usdcadOfferButton.setText("BUY");
        usdcadOfferButton.setToolTipText("");
        usdcadOfferButton.setBorder(null);
        usdcadOfferButton.setPreferredSize(new java.awt.Dimension(55, 23));
        usdcadOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usdcadOfferButtonActionPerformed(evt);
            }
        });

        usdcadQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdcadQty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));

        jLabel43.setBackground(new java.awt.Color(245, 245, 245));
        jLabel43.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(13, 68, 132));
        jLabel43.setText(" SELL");

        jLabel48.setBackground(new java.awt.Color(204, 0, 0));
        jLabel48.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(13, 68, 132));
        jLabel48.setText("BUY");

        javax.swing.GroupLayout jLayeredPane11Layout = new javax.swing.GroupLayout(jLayeredPane11);
        jLayeredPane11.setLayout(jLayeredPane11Layout);
        jLayeredPane11Layout.setHorizontalGroup(
            jLayeredPane11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane11Layout.createSequentialGroup()
                        .addGap(0, 4, Short.MAX_VALUE)
                        .addComponent(usdcadBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usdcadOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane11Layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(usdcadQty, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jLayeredPane11Layout.setVerticalGroup(
            jLayeredPane11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usdcadBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usdcadOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usdcadQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48)
                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jLayeredPane11.setLayer(usdcadBidButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane11.setLayer(usdcadOfferButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane11.setLayer(usdcadQty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane11.setLayer(jLabel43, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane11.setLayer(jLabel48, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "USD/CHF", 0, 0, new java.awt.Font("Segoe UI", 1, 14), new java.awt.Color(13, 68, 132))); // NOI18N

        usdchfBidButton.setBackground(new java.awt.Color(204, 0, 0));
        usdchfBidButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdchfBidButton.setForeground(new java.awt.Color(255, 255, 255));
        usdchfBidButton.setText("SELL");
        usdchfBidButton.setBorder(null);
        usdchfBidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usdchfBidButtonActionPerformed(evt);
            }
        });

        usdchfOfferButton.setBackground(new java.awt.Color(0, 153, 0));
        usdchfOfferButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdchfOfferButton.setForeground(new java.awt.Color(255, 255, 255));
        usdchfOfferButton.setText("BUY");
        usdchfOfferButton.setToolTipText("");
        usdchfOfferButton.setBorder(null);
        usdchfOfferButton.setPreferredSize(new java.awt.Dimension(55, 23));
        usdchfOfferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usdchfOfferButtonActionPerformed(evt);
            }
        });

        usdchfQty.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usdchfQty.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), null, null, Integer.valueOf(1000)));

        jLabel44.setBackground(new java.awt.Color(245, 245, 245));
        jLabel44.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(13, 68, 132));
        jLabel44.setText(" SELL");

        jLabel49.setBackground(new java.awt.Color(204, 0, 0));
        jLabel49.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(13, 68, 132));
        jLabel49.setText("BUY");

        javax.swing.GroupLayout jLayeredPane12Layout = new javax.swing.GroupLayout(jLayeredPane12);
        jLayeredPane12.setLayout(jLayeredPane12Layout);
        jLayeredPane12Layout.setHorizontalGroup(
            jLayeredPane12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPane12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane12Layout.createSequentialGroup()
                        .addComponent(usdchfBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usdchfOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane12Layout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usdchfQty, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jLayeredPane12Layout.setVerticalGroup(
            jLayeredPane12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usdchfBidButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usdchfOfferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usdchfQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49)
                    .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jLayeredPane12.setLayer(usdchfBidButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane12.setLayer(usdchfOfferButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane12.setLayer(usdchfQty, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane12.setLayer(jLabel44, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane12.setLayer(jLabel49, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane10)
                    .addComponent(eurusdPane))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLayeredPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLayeredPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane9)
                    .addComponent(eurusdPane)
                    .addComponent(jLayeredPane8))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane10)
                    .addComponent(jLayeredPane12)
                    .addComponent(jLayeredPane11))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 60, 740, 370);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tracro.jpg"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(0, 0, 1480, 785);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuBar1.setToolTipText("");
        jMenuBar1.setPreferredSize(new java.awt.Dimension(117, 35));

        jMenu1.setLabel("System");
        jMenu1.setVerifyInputWhenFocusTarget(false);
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Logout");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem10.setText("My Account");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem2.setText("Change Password");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem9.setText("Exit");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Help");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem4.setText("User Guide");
        jMenu3.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem5.setText("Technical Help");
        jMenu3.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem6.setText("Provide Feedback");
        jMenu3.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem7.setText("Newly Added Features");
        jMenu3.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("About Blueprint Capital Trading Platform");
        jMenu3.add(jMenuItem8);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dailyClosedTableListener() {
        ChangeListener changeListener = new ChangeListener() {
            public void stateChanged(ChangeEvent changeEvent) {

                for (int i = closedOrderTable.getRowCount() - 1; i >= 0; i--) {
                    closedtableModel.removeRow(i);
                }

                JTabbedPane sourceTabbedPane = (JTabbedPane) changeEvent.getSource();
                int tabIndex = sourceTabbedPane.getSelectedIndex();
                if (tabIndex == 2) {
                    if (controller.getDailyClosedTrade(userId).equals("[]")) {

                    } else {
                        JSONArray jsonArr = new JSONArray(controller.getDailyClosedTrade(userId));
                        for (int i = 0; i < jsonArr.length(); i++) {
                            JSONObject eachTrade = jsonArr.getJSONObject(i);
                            String uuid = eachTrade.getString("uuid");
                            String openTime = eachTrade.getString("openTime");
                            String closeTime = eachTrade.getString("closeTime");
                            String symbol = eachTrade.getString("symbol");
                            int size = eachTrade.getInt("size");
                            String side = eachTrade.getString("side");
                            String buyorsell = null;
                            if (side.equals("1")) {
                                buyorsell = "Buy";
                            } else if (side.equals("2")) {
                                buyorsell = "Sell";
                            }
                            double openPrice = eachTrade.getDouble("openPrice");
                            double closePrice = eachTrade.getDouble("closePrice");
                            double finalPnL = eachTrade.getDouble("finalPnL");
                            closedtableModel.addRow(new Object[]{uuid, openTime, closeTime, symbol, size, buyorsell, openPrice, closePrice, finalPnL});
                        }
                    }
                }
            }

        };
        allTable.addChangeListener(changeListener);
    }

    private void posTableListener() {

        //Row selection listener on main table to change content of client position
        posTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {

                posselectedRowIndex = posTable.getSelectedRow();

                if (posselectedRowIndex == -1) {
                    closeButton.setEnabled(false);
                } else {
                    closeButton.setEnabled(true);
                }
            }

        });
    }

    public void pendingTableListener() {

        //Row selection listener on main table to change content of client position
        pendingTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {

                pendingselectedRowIndex = pendingTable.getSelectedRow();
                if (posselectedRowIndex == -1) {
                    cancelButton.setEnabled(false);
                } else {
                    cancelButton.setEnabled(true);
                }
            }

        });
    }

    private void stopDiffListener() {
        JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) mktStopDiff.getEditor();
        JTextField textField = editor.getTextField();
        textField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                double stopDiff = (double) mktStopDiff.getValue();
                double mktRate = Double.parseDouble(stopMktPrice.getText());
                double stopPrice = stopDiff + mktRate;
                System.out.print(stopPrice);
                mktStopRate.setValue(stopPrice);

                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

            }

        });
    }

//    private void addPendingTable() {
//
//        String tradetime = MktOrder.getTimestamp();
//        String symbol = MktOrder.getSymbol();
//        int size = MktOrder.getQty();
//        char buyorsell = MktOrder.getSide();
//        double price = MktOrder.getPrice();
//
//        char sidechar = MktOrder.getSide();
//        System.out.println(sidechar);
//        boolean isBuy = false;
//        String side = null;
//        //double pnl = 0;
//
////        try {
////            double stop = MktOrder.getStopLoss();
////            stopString = Double.toString(stop);
////        } catch (java.lang.NullPointerException ex) {
////
////        }
//        Double stop = MktOrder.getStopLoss();
//        Double limit = MktOrder.getTakeProfit();
//
//        switch (buyorsell) {
//            case '0':
//                side = "Buy";
//                break;
//            case '1':
//                side = "Sell";
//                break;
//        }
//
//        System.out.println(buyorsell);
//
//        ((DefaultTableModel) pendingTable.getModel()).addRow(new Object[]{tradetime, symbol, size, side, price, stop, limit});
//
//    }
    public void computePnL(String sym, Double bidPrice, Double offerPrice) {

        int row = posTable.getRowCount();
        //System.out.println(row);

        for (int i = 0; i < row; i++) {
            String symbol = (String) posTable.getValueAt(i, 2);
            String buyorsell = (String) posTable.getValueAt(i, 4);
            int size = (int) posTable.getValueAt(i, 3);
            double tradePrice = (double) posTable.getValueAt(i, 5);
            double exchangeRate = 1;

//            System.out.println(buyorsell+","+tradePrice);
            if (sym.contains(symbol)) {
                if (symbol.equals("USD/JPY")) {
                    exchangeRate = usdjpyBid;
                } else if (symbol.equals("USD/CAD")) {
                    exchangeRate = usdcadBid;
                } else if (symbol.equals("USD/CHF")) {
                    exchangeRate = usdchfBid;
                }

                if (buyorsell.equals("Buy")) {
                    pnl = ((bidPrice - tradePrice) * size) / exchangeRate;
                    //System.out.println("(" + bidPrice + "-" + tradePrice + ")*" + size + "/" + exchangeRate + "=" + pnl);
                    double roundPnl = (double) (Math.round(pnl * 100) / 100.0);
                    if (roundPnl >= 0) {
                        posTable.setValueAt("<html><b><font color = green>" + roundPnl + "</font></b></html>", i, 8);
                    } else {
                        posTable.setValueAt("<html><b><font color = red>" + roundPnl + "</font></b></html>", i, 8);
                    }

                } else if (buyorsell.equals("Sell")) {
                    pnl = ((tradePrice - offerPrice) * size) / exchangeRate;
                    //System.out.println("(" + tradePrice + "-" + offerPrice + ")*" + size + "/" + exchangeRate + "=" + pnl);
                    double roundPnl = (double) (Math.round(pnl * 100) / 100.0);
                    if (roundPnl >= 0) {
                        posTable.setValueAt("<html><b><font color = green>" + roundPnl + "</font></b></html>", i, 8);
                    } else {
                        posTable.setValueAt("<html><b><font color = red>" + roundPnl + "</font></b></html>", i, 8);
                    }

                }
            }

        }

//        double pnl = 0;
//        if (sym.contains("EUR/USD")) {
//            pnl = (MktOrder.getPrice()-offerPrice)*MktOrder.getQty();
//        }
//        posTable.setValueAt("1", 0, 5);
//        System.out.println(pnl);
    }

    public void fillAllPosTable(PortfolioPosition[] positions) {
        int posCount = positions.length;
        PortfolioPosition singlePos = new PortfolioPosition();
//        posTable.removeColumn(posTable.getColumnModel().getColumn(0));

        for (int i = 0; i < posCount; i++) {
            singlePos = positions[i];
            String symbol = singlePos.getSymbol();
            double price = singlePos.getPrice();
            int size = singlePos.getSize();
            boolean isBuy = singlePos.getIsBuy();
            long updateTime = singlePos.getUpdateTime();
            String orderId = singlePos.getOrderId();
            boolean isClosed = singlePos.isClosed();

            //change later
            Double stop = null;
            Double limit = null;

            String side = "";

            if (isBuy) {
                side = "Buy";
            } else {
                side = "Sell";
            }

            Date date = new Date(updateTime);
            Format format = new SimpleDateFormat("HH:mm:ss yyyy/MM/dd");

            if (!isClosed) {

                postableModel.addRow(new Object[]{orderId, format.format(date), symbol, size, side, price, stop, limit, 0});

            } else {

                for (int j = 0; j < posTable.getRowCount(); j++) {
                    if (posTable.getValueAt(j, 0).equals(orderId)) {
                        postableModel.removeRow(j);
//                        closedtableModel.addRow(new Object[]{orderId, format.format(date), symbol, size, side, price, 0});
                    }
                }

            }
        }

    }

    public void updatePosTable(PortfolioPosition position) {
        String symbol = position.getSymbol();
        double price = position.getPrice();
        int size = position.getSize();
        boolean isBuy = position.getIsBuy();
        long updateTime = position.getUpdateTime();
        String orderId = position.getOrderId();
        boolean isClosed = position.isClosed();

        //change later
        Double stop = null;
        Double limit = null;

        String side = "";

        if (isBuy) {
            side = "Buy";
        } else {
            side = "Sell";
        }

        Date date = new Date(updateTime);
        Format format = new SimpleDateFormat("HH:mm:ss yyyy/MM/dd");

        if (!isClosed) {

            postableModel.addRow(new Object[]{orderId, format.format(date), symbol, size, side, price, stop, limit, 0});

        } else {

            for (int i = 0; i < posTable.getRowCount(); i++) {
                if (posTable.getValueAt(i, 0).equals(orderId)) {
                    postableModel.removeRow(i);
                    JSONArray jsonArr = new JSONArray(controller.getDailyClosedTrade(userId));
                    int index = jsonArr.length() - 1;
                    JSONObject eachTrade = jsonArr.getJSONObject(index);
                    String closeuuid = eachTrade.getString("uuid");
                    String openTime = eachTrade.getString("openTime");
                    String closeTime = eachTrade.getString("closeTime");
                    String closesymbol = eachTrade.getString("symbol");
                    int closesize = eachTrade.getInt("size");
                    String closeside = eachTrade.getString("side");
                    String buyorsell = null;
                    if (closeside.equals("1")) {
                        buyorsell = "Buy";
                    } else if (closeside.equals("2")) {
                        buyorsell = "Sell";
                    }
                    double openPrice = eachTrade.getDouble("openPrice");
                    double closePrice = eachTrade.getDouble("closePrice");
                    double finalPnL = eachTrade.getDouble("finalPnL");
                    closedtableModel.addRow(new Object[]{closeuuid, openTime, closeTime, closesymbol, closesize, buyorsell, openPrice, closePrice, finalPnL});
                }
            }

        }

    }

    public void exceedLimitMsg(ErrorMessage error) {
        String errorMsg = error.getMessage();

        if (errorMsg.contains("40001")) {
            System.out.println(errorMsg);
            //format trade rejected error
            String Msg = "Trading Failure\n\n" + errorMsg
                    .replace("com.bpc.trade.exception.TradeRejectedException:", "")
                    .replace(",\"validationErrors\":[]", "")
                    .replace("\"", "").replace("{", "").replace("}", "")
                    .replace("errorCode:40001,consumerMessage:Trade not exectuted,applicationMessage:", "\n");
            javax.swing.JOptionPane.showMessageDialog(this, Msg, "Trade Not Executed", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
        
        if (errorMsg.contains("40301")) {
          System.out.println(errorMsg);
          //format trade unauthorized error
          String Msg = "Trading Failure\n\n" + errorMsg
                  .replace("com.bpc.trade.exception.TradeRejectedException:", "")
                  .replace(",\"validationErrors\":[]", "")
                  .replace("\"", "").replace("{", "").replace("}", "")
                  .replace("errorCode:40301,consumerMessage:Not authorized,applicationMessage:", "\n");
          javax.swing.JOptionPane.showMessageDialog(this, Msg, "Trade Not Executed", javax.swing.JOptionPane.WARNING_MESSAGE);
      }
    }

    public void sessionTimeout() {
        String errorMsg = "Your session has timed out due to inactivity \nPlease log in again to enable trading";
        javax.swing.JOptionPane.showMessageDialog(this, errorMsg, "Session Timed Out", javax.swing.JOptionPane.WARNING_MESSAGE);
    }

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        // TODO add your handling code here:

        TradeMktDialog.setLocationRelativeTo(this);
        TradeMktDialog.setVisible(true);
        mktDialogSell.setSelected(true);
        jLabel9.setText(">");
        jLabel12.setText("<");

        mktDialogLimit.setSelected(false);
        mktLimitRate.setEnabled(false);
        mktLimitDiff.setEnabled(false);
        mktDialogStop.setSelected(false);
        mktStopRate.setEnabled(false);
        mktStopDiff.setEnabled(false);
//        mktStopDiff.setValue(0);
//        mktLimitDiff.setValue(0);

        SpinnerNumberModel stoprateModel = (SpinnerNumberModel) mktStopRate.getModel();
        stoprateModel.setStepSize(0.001);
        SpinnerNumberModel limitrateModel = (SpinnerNumberModel) mktLimitRate.getModel();
        limitrateModel.setStepSize(0.001);
        SpinnerNumberModel stopDiffModel = (SpinnerNumberModel) mktStopDiff.getModel();
        stopDiffModel.setStepSize(0.001);
        SpinnerNumberModel limitDiffModel = (SpinnerNumberModel) mktLimitDiff.getModel();
        limitDiffModel.setStepSize(0.001);

        JSpinner.NumberEditor enstopnumberEditor = new JSpinner.NumberEditor(mktStopRate, "0.00000");
        mktStopRate.setEditor(enstopnumberEditor);

        JSpinner.NumberEditor enlimitnumberEditor = new JSpinner.NumberEditor(mktLimitRate, "0.00000");
        mktLimitRate.setEditor(enlimitnumberEditor);

        JSpinner.NumberEditor enstopdiffnumberEditor = new JSpinner.NumberEditor(mktStopDiff, "0.00000");
        mktStopDiff.setEditor(enstopdiffnumberEditor);

        JSpinner.NumberEditor enlimitdiffnumberEditor = new JSpinner.NumberEditor(mktLimitDiff, "0.00000");
        mktLimitDiff.setEditor(enlimitdiffnumberEditor);

        ChangeListener stoplistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double stopDiff = (double) mktStopDiff.getValue();
                double stopmktPrice = Double.parseDouble(stopMktPrice.getText());
                double stopprice = stopmktPrice + stopDiff;
                System.out.println(stopprice);
                mktStopRate.setValue(stopprice);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        mktStopDiff.addChangeListener(stoplistener);

        ChangeListener limitlistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double limitDiff = (double) mktLimitDiff.getValue();
                double limitmktPrice = Double.parseDouble(limitMktPrice.getText());
                double limitprice = limitmktPrice + limitDiff;
                System.out.println(limitprice);
                mktLimitRate.setValue(limitprice);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        mktLimitDiff.addChangeListener(limitlistener);

        ChangeListener stopratelistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double stopRate = (double) mktStopRate.getValue();
                double stopmktPrice = Double.parseDouble(stopMktPrice.getText());
                double stopDiff = stopRate - stopmktPrice;

                mktStopDiff.setValue(stopDiff);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        mktStopRate.addChangeListener(stopratelistener);

        ChangeListener limitratelistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double limitRate = (double) mktLimitRate.getValue();
                double limitmktPrice = Double.parseDouble(limitMktPrice.getText());
                double limitDiff = limitRate - limitmktPrice;

                mktLimitDiff.setValue(limitDiff);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        mktLimitRate.addChangeListener(limitratelistener);


    }//GEN-LAST:event_sellButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        // TODO add your handling code here:
        TradeMktDialog.setLocationRelativeTo(this);
        TradeMktDialog.setVisible(true);
        mktDialogBuy.setSelected(true);
        jLabel9.setText("<");
        jLabel12.setText(">");
        mktDialogLimit.setSelected(false);
        mktLimitRate.setEnabled(false);
        mktLimitDiff.setEnabled(false);
        mktDialogStop.setSelected(false);
        mktStopRate.setEnabled(false);
        mktStopDiff.setEnabled(false);
    }//GEN-LAST:event_buyButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        posselectedRowIndex = posTable.getSelectedRow();

        if (posselectedRowIndex == -1) {

            javax.swing.JOptionPane.showMessageDialog(this, "Please select one open position on the open positions table below.", "Selection Invalid", javax.swing.JOptionPane.WARNING_MESSAGE);

        } else {

            int dialogButton = javax.swing.JOptionPane.YES_NO_OPTION;
            dialogButton = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to close this open trading?", "Close Open Trading", dialogButton);

            if (dialogButton == javax.swing.JOptionPane.YES_OPTION) {
                String orderId = (String) posTable.getValueAt(posselectedRowIndex, 0);
                String symbol = (String) posTable.getValueAt(posselectedRowIndex, 2);
                int closeOrderQty = (int) posTable.getValueAt(posselectedRowIndex, 3);
                String buyorsell = (String) posTable.getValueAt(posselectedRowIndex, 4);
                String sidein = null;
                String currency = symbol.substring(Math.max(0, symbol.length() - 3));
                double price = 0;
                double otherprice = 0;

                if (buyorsell.equals("Buy")) {
                    sidein = "1";
                } else if (buyorsell.equals("Sell")) {
                    sidein = "2";
                }

                char side = sidein.charAt(0);

                String typest = "1";
                char type = typest.charAt(0);

                if (symbol.equals("EUR/USD")) {
                    if (buyorsell.equals("Buy")) {
                        price = eurusdBid;
                        otherprice = eurusdAsk;
                    } else if (buyorsell.equals("Sell")) {
                        price = eurusdAsk;
                        otherprice = eurusdBid;
                    }
                } else if (symbol.equals("GBP/USD")) {
                    if (buyorsell.equals("Buy")) {
                        price = gbpusdBid;
                        otherprice = gbpusdAsk;
                    } else if (buyorsell.equals("Sell")) {
                        price = gbpusdAsk;
                        otherprice = gbpusdBid;
                    }
                } else if (symbol.equals("USD/JPY")) {
                    if (buyorsell.equals("Buy")) {
                        price = usdjpyBid;
                        otherprice = usdjpyAsk;
                    } else if (buyorsell.equals("Sell")) {
                        price = usdjpyAsk;
                        otherprice = usdjpyBid;
                    }
                } else if (symbol.equals("AUD/USD")) {
                    if (buyorsell.equals("Buy")) {
                        price = audusdBid;
                        otherprice = audusdAsk;
                    } else if (buyorsell.equals("Sell")) {
                        price = audusdAsk;
                        otherprice = audusdBid;
                    }
                } else if (symbol.equals("USD/CAD")) {
                    if (buyorsell.equals("Buy")) {
                        price = usdcadBid;
                        otherprice = usdcadBid;
                    } else if (buyorsell.equals("Sell")) {
                        price = usdcadAsk;
                        otherprice = usdcadBid;
                    }
                } else if (symbol.equals("USD/CHF")) {
                    if (buyorsell.equals("Buy")) {
                        price = usdchfBid;
                        otherprice = usdchfBid;
                    } else if (buyorsell.equals("Sell")) {
                        price = usdchfAsk;
                        otherprice = usdchfBid;
                    }
                }

                Double stop = null;

                Double limit = null;

                Calendar cal = Calendar.getInstance();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
                String timestamp = sdf.format(cal.getTime());

                closeOrder.setUuid(orderId);
                closeOrder.setAccountID(accountId);
                closeOrder.setContingencyType(type);
                closeOrder.setCurrency(currency);
                closeOrder.setOtherPrice(otherprice);
                closeOrder.setPrice(price);
                closeOrder.setQty(closeOrderQty);
                closeOrder.setSide(side);
                closeOrder.setSymbol(symbol);
                closeOrder.setUserID(userId);

                Gson gson = new Gson();
                String closeData = gson.toJson(closeOrder);

                System.out.println(closeData);

                websocket.sendTradeClose(closeOrder);

                javax.swing.JOptionPane.showMessageDialog(this, "The open trading is closing. It will be removed from your open positions table when finished.");
            } else if (dialogButton == javax.swing.JOptionPane.NO_OPTION) {
                remove(dialogButton);
            }
        }

    }//GEN-LAST:event_closeButtonActionPerformed

    private void entryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryButtonActionPerformed
        // TODO add your handling code here:
        EntryDialog.setLocationRelativeTo(this);
        EntryDialog.setVisible(true);
        entrySell.setSelected(true);

        /**
         * try{
         * jSpinner4.setValue(getPriceSingle("http://104.155.25.165:8080/services/bpc/marketservice/get_price?sym=eur/usd"));
         * }catch (Exception e) { // TODO Auto-generated catch block
         * e.printStackTrace(); } *
         */
        jLabel9.setText(">");
        jLabel12.setText("<");
        entryPrice.setValue(eurusdBid);
        entryLimit.setSelected(false);
        entryLimitRate.setEnabled(false);
        entryLimitDiff.setEnabled(false);
        entryStop.setSelected(false);
        entryStopRate.setEnabled(false);
        entryStopDiff.setEnabled(false);

        SpinnerNumberModel rateModel = (SpinnerNumberModel) entryPrice.getModel();
        rateModel.setStepSize(0.001);
        SpinnerNumberModel stoprateModel = (SpinnerNumberModel) entryStopRate.getModel();
        stoprateModel.setStepSize(0.001);
        SpinnerNumberModel limitrateModel = (SpinnerNumberModel) entryLimitRate.getModel();
        limitrateModel.setStepSize(0.001);
        SpinnerNumberModel stopDiffModel = (SpinnerNumberModel) entryStopDiff.getModel();
        stopDiffModel.setStepSize(0.001);
        SpinnerNumberModel limitDiffModel = (SpinnerNumberModel) entryLimitDiff.getModel();
        limitDiffModel.setStepSize(0.001);

        JSpinner.NumberEditor enprinumberEditor = new JSpinner.NumberEditor(entryPrice, "0.00000");
        entryPrice.setEditor(enprinumberEditor);

        JSpinner.NumberEditor enstopnumberEditor = new JSpinner.NumberEditor(entryStopRate, "0.00000");
        entryStopRate.setEditor(enstopnumberEditor);

        JSpinner.NumberEditor enlimitnumberEditor = new JSpinner.NumberEditor(entryLimitRate, "0.00000");
        entryLimitRate.setEditor(enlimitnumberEditor);

        JSpinner.NumberEditor enstopdiffnumberEditor = new JSpinner.NumberEditor(entryStopDiff, "0.00000");
        entryStopDiff.setEditor(enstopdiffnumberEditor);

        JSpinner.NumberEditor enlimitdiffnumberEditor = new JSpinner.NumberEditor(entryLimitDiff, "0.00000");
        entryLimitDiff.setEditor(enlimitdiffnumberEditor);

        ChangeListener stoplistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double stopDiff = (double) entryStopDiff.getValue();
                double stopmktPrice = Double.parseDouble(entryStopPrice.getText());
                double stopprice = stopmktPrice + stopDiff;
                System.out.println(stopprice);
                entryStopRate.setValue(stopprice);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        entryStopDiff.addChangeListener(stoplistener);

        ChangeListener limitlistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double limitDiff = (double) entryLimitDiff.getValue();
                double limitmktPrice = Double.parseDouble(entryLimitPrice.getText());
                double limitprice = limitmktPrice + limitDiff;
                System.out.println(limitprice);
                entryLimitRate.setValue(limitprice);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        entryLimitDiff.addChangeListener(limitlistener);

        ChangeListener stopratelistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double stopRate = (double) entryStopRate.getValue();
                double stopmktPrice = Double.parseDouble(entryStopPrice.getText());
                double stopDiff = stopRate - stopmktPrice;

                entryStopDiff.setValue(stopDiff);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        entryStopRate.addChangeListener(stopratelistener);

        ChangeListener limitratelistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double limitRate = (double) entryLimitRate.getValue();
                double limitmktPrice = Double.parseDouble(entryLimitPrice.getText());
                double limitDiff = limitRate - limitmktPrice;

                entryLimitDiff.setValue(limitDiff);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        entryLimitRate.addChangeListener(limitratelistener);

        ChangeListener entryratelistener = new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                double entryRate = (double) entryPrice.getValue();
                String entryrate = Double.toString(entryRate);
                entryStopPrice.setText(entryrate);
                entryLimitPrice.setText(entryrate);

//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };

        entryPrice.addChangeListener(entryratelistener);

    }//GEN-LAST:event_entryButtonActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        posselectedRowIndex = posTable.getSelectedRow();

        if (posselectedRowIndex == -1) {

            javax.swing.JOptionPane.showMessageDialog(this, "Please select one open position on the open positions table below.", "Selection Invalid", javax.swing.JOptionPane.WARNING_MESSAGE);

        } else {

            String symbol = (String) posTable.getValueAt(posselectedRowIndex, 2);
            int size = (int) posTable.getValueAt(posselectedRowIndex, 3);
            String side = (String) posTable.getValueAt(posselectedRowIndex, 4);
            double price = (double) posTable.getValueAt(posselectedRowIndex, 5);

            editSymbol.setText(symbol);
            editSize.setText(Integer.toString(size));
            editSide.setText(side);
            editRate.setText(Double.toString(price));
            editStopMkt.setText(Double.toString(price));
            editLimitMkt.setText(Double.toString(price));

            if (side.equals("Buy")) {
                editStopGL.setText("<");
                editLimitGL.setText(">");
            } else if (side.equals("Sell")) {
                editStopGL.setText(">");
                editLimitGL.setText("<");
            }

            SpinnerNumberModel stoprateModel = (SpinnerNumberModel) editStopRate.getModel();

            SpinnerNumberModel limitrateModel = (SpinnerNumberModel) editLimitRate.getModel();

            SpinnerNumberModel stopDiffModel = (SpinnerNumberModel) editStopDiff.getModel();

            SpinnerNumberModel limitDiffModel = (SpinnerNumberModel) editLimitDiff.getModel();

            if (symbol.equals("USD/JPY")) {
                stoprateModel.setStepSize(0.1);
                limitrateModel.setStepSize(0.1);
                stopDiffModel.setStepSize(0.1);
                limitDiffModel.setStepSize(0.1);

                JSpinner.NumberEditor stopnumberEditor = new JSpinner.NumberEditor(mktStopRate, "0.000");
                JSpinner.NumberEditor limitnumberEditor = new JSpinner.NumberEditor(mktLimitRate, "0.000");
                JSpinner.NumberEditor stopDiffnumberEditor = new JSpinner.NumberEditor(mktStopDiff, "0.000");
                JSpinner.NumberEditor limitDiffnumberEditor = new JSpinner.NumberEditor(mktLimitDiff, "0.000");

            } else {

                stoprateModel.setStepSize(0.001);
                limitrateModel.setStepSize(0.001);
                stopDiffModel.setStepSize(0.001);
                limitDiffModel.setStepSize(0.001);

                JSpinner.NumberEditor stopnumberEditor = new JSpinner.NumberEditor(mktStopRate, "0.00000");
                JSpinner.NumberEditor limitnumberEditor = new JSpinner.NumberEditor(mktLimitRate, "0.00000");
                JSpinner.NumberEditor stopDiffnumberEditor = new JSpinner.NumberEditor(mktStopDiff, "0.00000");
                JSpinner.NumberEditor limitDiffnumberEditor = new JSpinner.NumberEditor(mktLimitDiff, "0.00000");

            }

            editTradeDialog.setLocationRelativeTo(this);
            editTradeDialog.setVisible(true);

            ChangeListener stoplistener = new ChangeListener() {

                @Override
                public void stateChanged(ChangeEvent e) {
                    double stopDiff = (double) editStopDiff.getValue();
                    double stopmktPrice = Double.parseDouble(editStopMkt.getText());
                    double stopprice = stopmktPrice + stopDiff;
                    System.out.println(stopprice);
                    editStopRate.setValue(stopprice);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };

            editStopDiff.addChangeListener(stoplistener);

            ChangeListener limitlistener = new ChangeListener() {

                @Override
                public void stateChanged(ChangeEvent e) {
                    double limitDiff = (double) editLimitDiff.getValue();
                    double limitmktPrice = Double.parseDouble(editLimitMkt.getText());
                    double limitprice = limitmktPrice + limitDiff;
                    System.out.println(limitprice);
                    editLimitRate.setValue(limitprice);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };

            editLimitDiff.addChangeListener(limitlistener);

            ChangeListener stopratelistener = new ChangeListener() {

                @Override
                public void stateChanged(ChangeEvent e) {
                    double stopRate = (double) editStopRate.getValue();
                    double stopmktPrice = Double.parseDouble(editStopMkt.getText());
                    double stopDiff = stopRate - stopmktPrice;

                    editStopDiff.setValue(stopDiff);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };

            editStopRate.addChangeListener(stopratelistener);

            ChangeListener limitratelistener = new ChangeListener() {

                @Override
                public void stateChanged(ChangeEvent e) {
                    double limitRate = (double) editLimitRate.getValue();
                    double limitmktPrice = Double.parseDouble(editLimitMkt.getText());
                    double limitDiff = limitRate - limitmktPrice;

                    editLimitDiff.setValue(limitDiff);
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };

            editLimitRate.addChangeListener(limitratelistener);

        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:

        int dialogButton = javax.swing.JOptionPane.YES_NO_OPTION;
        dialogButton = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to log off?", "Quit Trading", dialogButton);

        if (dialogButton == javax.swing.JOptionPane.YES_OPTION) {
            this.dispose();
            LoginUI login = new LoginUI();
            login.setVisible(true);
            login.setLocationRelativeTo(this);
        } else if (dialogButton == javax.swing.JOptionPane.NO_OPTION) {
            remove(dialogButton);
        }


    }//GEN-LAST:event_jButton8ActionPerformed

    private void myAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myAccountButtonActionPerformed
        // TODO add your handling code here:
        String userDataJson = controller.getUser(userId);
        JSONObject userData = new JSONObject(userDataJson);

        System.out.println(userData);

        String userfirstname = userData.getString("firstName");
        String userlastname = userData.getString("lastName");
        String userEmail = userData.getString("emailAddress");
        String address = null;
        String phone = null;

        if (userData.isNull("address")) {
            changeAddrField.setText("-");
        } else {
            address = userData.getString("address");
        }

        if (userData.isNull("phoneNumber")) {
            changePhoneField.setText("-");
        } else {
            phone = userData.getString("phoneNumber");
        }

        boolean isVerified = userData.getBoolean("verified");

        String name = userfirstname + " " + userlastname;

        viewAllName.setText(name);
        firstnameField.setText(userfirstname);
        lastnameField.setText(userlastname);
        emailField.setText(userEmail);
        changeAddrField.setText(address);
        changePhoneField.setText(phone);

        if (isVerified) {
            verifiedField.setForeground(new java.awt.Color(0, 207, 0));
            verifiedField.setText("Verified");
        } else {
            verifiedField.setForeground(new java.awt.Color(204, 0, 0));
            verifiedField.setText("Not Verified");
        }

        if (userData.isNull("responsibleUserId")) {
            administratorField.setText("");
        } else {
            String administratorId = userData.getString("responsibleUserId");
            System.out.println(controller.getUser(administratorId));
            String adminDataJson = controller.getUser(administratorId);
            JSONObject adminData = new JSONObject(adminDataJson);
            String adminfirstname = adminData.getString("firstName");
            String adminlastname = adminData.getString("lastName");
            administratorField.setText(adminfirstname + " " + adminlastname);
        }

        //fill all trade table
        if (controller.getAllTrade(userId).equals("[]")) {

        } else {
            JSONArray jsonArr = new JSONArray(controller.getAllTrade(userId));
            for (int i = 0; i < jsonArr.length(); i++) {
                JSONObject eachTrade = jsonArr.getJSONObject(i);
                String uuid = eachTrade.getString("uuid");
                String openTime = eachTrade.getString("openTime");
                String closeTime = eachTrade.getString("closeTime");
                String symbol = eachTrade.getString("symbol");
                int size = eachTrade.getInt("size");
                String side = eachTrade.getString("side");
                String buyorsell = null;
                if (side.equals("1")) {
                    buyorsell = "Buy";
                } else if (side.equals("2")) {
                    buyorsell = "Sell";
                }
                double openPrice = eachTrade.getDouble("openPrice");
                double closePrice = eachTrade.getDouble("closePrice");
                double finalPnL = eachTrade.getDouble("finalPnL");
                allTradetableModel.addRow(new Object[]{uuid, openTime, closeTime, symbol, size, buyorsell, openPrice, closePrice, finalPnL});

            }

        }

        reportDialog.setLocationRelativeTo(this);
        reportDialog.setVisible(true);
    }//GEN-LAST:event_myAccountButtonActionPerformed

    private void eurusdBidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eurusdBidButtonActionPerformed
        // TODO add your handling code here:
        websocket.listenToErrors();

        int eurusdBidOrderQty = (Integer) eurusdQty.getValue();

        String sidein = "2";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("EUR/USD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("usd");

        MktOrder.setSide(side);

        MktOrder.setAccountID("e27a7d39-88f7-4f85-b524-ca67383cd4ab");

        MktOrder.setQty(eurusdBidOrderQty);

        MktOrder.setPrice(eurusdBid);

        MktOrder.setOtherPrice(eurusdAsk);

        Gson gson = new Gson();
        String eurusdBidData = gson.toJson(MktOrder);

        System.out.println(eurusdBidData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_eurusdBidButtonActionPerformed

    private void usdcadBidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usdcadBidButtonActionPerformed
        // TODO add your handling code here:
        int usdcadBidOrderQty = (Integer) usdcadQty.getValue();

        String sidein = "2";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("USD/CAD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("cad");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(usdcadBidOrderQty);

        MktOrder.setPrice(usdcadBid);

        MktOrder.setOtherPrice(usdcadAsk);

        Gson gson = new Gson();
        String usdcadBidData = gson.toJson(MktOrder);

        System.out.println(usdcadBidData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_usdcadBidButtonActionPerformed

    private void usdchfBidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usdchfBidButtonActionPerformed
        // TODO add your handling code here:
        int usdchfBidOrderQty = (Integer) usdchfQty.getValue();

        String sidein = "2";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("USD/CHF");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("chf");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(usdchfBidOrderQty);

        MktOrder.setPrice(usdchfBid);

        MktOrder.setOtherPrice(usdchfAsk);

        Gson gson = new Gson();
        String usdchfBidData = gson.toJson(MktOrder);

        System.out.println(usdchfBidData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_usdchfBidButtonActionPerformed

    private void eurusdOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eurusdOfferButtonActionPerformed
        // TODO add your handling code here:
        int eurusdAskOrderQty = (Integer) eurusdQty.getValue();

        String sidein = "1";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("EUR/USD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("usd");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(eurusdAskOrderQty);

        MktOrder.setPrice(eurusdAsk);

        MktOrder.setOtherPrice(eurusdBid);

        Gson gson = new Gson();
        String eurusdAskData = gson.toJson(MktOrder);

        System.out.println(side);

        System.out.println(eurusdAskData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_eurusdOfferButtonActionPerformed

    private void mktDialogBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mktDialogBuyActionPerformed
        // TODO add your handling code here:
        jLabel9.setText("<");
        jLabel12.setText(">");
    }//GEN-LAST:event_mktDialogBuyActionPerformed

    private void mktDialogSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mktDialogSellActionPerformed
        // TODO add your handling code here:
        jLabel9.setText(">");
        jLabel12.setText("<");
    }//GEN-LAST:event_mktDialogSellActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        TradeMktDialog.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void mktDialogLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mktDialogLimitActionPerformed
        // TODO add your handling code here:
        if (!mktDialogLimit.isSelected()) {
            mktLimitRate.setEnabled(false);
            mktLimitDiff.setEnabled(false);
        } else {
            mktLimitRate.setEnabled(true);
            mktLimitDiff.setEnabled(true);
        }
    }//GEN-LAST:event_mktDialogLimitActionPerformed

    private void mktDialogStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mktDialogStopActionPerformed
        // TODO add your handling code here:
        if (!mktDialogStop.isSelected()) {
            mktStopRate.setEnabled(false);
            mktStopDiff.setEnabled(false);
        } else {
            mktStopRate.setEnabled(true);
            mktStopDiff.setEnabled(true);
//            double stopDiff = (double) mktStopDiff.getValue();
//            double stopmktPrice = Double.parseDouble(stopMktPrice.getText());
//            mktStopRate.setValue(stopmktPrice+stopDiff);
        }
    }//GEN-LAST:event_mktDialogStopActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        ChangePw.setLocationRelativeTo(this);
        ChangePw.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        int dialogButton = javax.swing.JOptionPane.YES_NO_OPTION;
        dialogButton = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to log off?", "Quit Trading", dialogButton);

        if (dialogButton == javax.swing.JOptionPane.YES_OPTION) {
            this.dispose();
            LoginUI login = new LoginUI();
            login.setVisible(true);
        } else if (dialogButton == javax.swing.JOptionPane.NO_OPTION) {
            remove(dialogButton);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void audusdBidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audusdBidButtonActionPerformed
        // TODO add your handling code here:
        int audusdBidOrderQty = (Integer) audusdQty.getValue();

        String sidein = "2";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("AUD/USD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("usd");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(audusdBidOrderQty);

        MktOrder.setPrice(audusdBid);

        MktOrder.setOtherPrice(audusdAsk);

        Gson gson = new Gson();
        String audusdBidData = gson.toJson(MktOrder);

        System.out.println(audusdBidData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_audusdBidButtonActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void entrySellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrySellActionPerformed
        // TODO add your handling code here:
        jLabel32.setText(">");
        jLabel35.setText("<");

        if (entrySymbol.getSelectedIndex() == 0) {

            entryPrice.setValue(eurusdBid);

        } else if (entrySymbol.getSelectedIndex() == 1) {

            entryPrice.setValue(gbpusdBid);

        } else if (entrySymbol.getSelectedIndex() == 2) {

            entryPrice.setValue(usdjpyBid);

        } else if (entrySymbol.getSelectedIndex() == 3) {

            entryPrice.setValue(audusdBid);

        } else if (entrySymbol.getSelectedIndex() == 4) {

            entryPrice.setValue(usdcadBid);

        } else if (entrySymbol.getSelectedIndex() == 5) {

            entryPrice.setValue(usdchfBid);

        }

    }//GEN-LAST:event_entrySellActionPerformed

    private void entryBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryBuyActionPerformed
        // TODO add your handling code here:
        jLabel32.setText("<");
        jLabel35.setText(">");

        if (entrySymbol.getSelectedIndex() == 0) {

            entryPrice.setValue(eurusdAsk);;

        } else if (entrySymbol.getSelectedIndex() == 1) {

            entryPrice.setValue(gbpusdAsk);;

        } else if (entrySymbol.getSelectedIndex() == 2) {

            entryPrice.setValue(usdjpyAsk);;

        } else if (entrySymbol.getSelectedIndex() == 3) {

            entryPrice.setValue(audusdAsk);;

        } else if (entrySymbol.getSelectedIndex() == 4) {

            entryPrice.setValue(usdcadAsk);;

        } else if (entrySymbol.getSelectedIndex() == 5) {

            entryPrice.setValue(usdchfAsk);;

        }
    }//GEN-LAST:event_entryBuyActionPerformed

    private void entryStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryStopActionPerformed
        // TODO add your handling code here:
        if (!entryStop.isSelected()) {
            entryStopRate.setEnabled(false);
            entryStopDiff.setEnabled(false);
        } else {
            entryStopRate.setEnabled(true);
            entryStopDiff.setEnabled(true);
        }
    }//GEN-LAST:event_entryStopActionPerformed

    private void entryLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryLimitActionPerformed
        // TODO add your handling code here:
        if (!entryLimit.isSelected()) {
            entryLimitRate.setEnabled(false);
            entryLimitDiff.setEnabled(false);
        } else {
            entryLimitRate.setEnabled(true);
            entryLimitDiff.setEnabled(true);
        }
    }//GEN-LAST:event_entryLimitActionPerformed

    private void mktDialogSymbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mktDialogSymbolActionPerformed
        // TODO add your handling code here:

        SpinnerNumberModel stoprateModel = (SpinnerNumberModel) mktStopRate.getModel();
        stoprateModel.setStepSize(0.001);
        SpinnerNumberModel limitrateModel = (SpinnerNumberModel) mktLimitRate.getModel();
        limitrateModel.setStepSize(0.001);
        SpinnerNumberModel stopDiffModel = (SpinnerNumberModel) mktStopDiff.getModel();
        stopDiffModel.setStepSize(0.001);
        SpinnerNumberModel limitDiffModel = (SpinnerNumberModel) mktLimitDiff.getModel();
        limitDiffModel.setStepSize(0.001);

        JSpinner.NumberEditor stopnumberEditor = new JSpinner.NumberEditor(mktStopRate, "0.00000");
        JSpinner.NumberEditor limitnumberEditor = new JSpinner.NumberEditor(mktLimitRate, "0.00000");
        JSpinner.NumberEditor stopDiffnumberEditor = new JSpinner.NumberEditor(mktStopDiff, "0.00000");
        JSpinner.NumberEditor limitDiffnumberEditor = new JSpinner.NumberEditor(mktLimitDiff, "0.00000");

        if (mktDialogSymbol.getSelectedIndex() == 2) {

            stopnumberEditor = new JSpinner.NumberEditor(mktStopRate, "0.000");
            limitnumberEditor = new JSpinner.NumberEditor(mktLimitRate, "0.000");
            stopDiffnumberEditor = new JSpinner.NumberEditor(mktStopDiff, "0.000");
            limitDiffnumberEditor = new JSpinner.NumberEditor(mktLimitDiff, "0.000");

            stoprateModel.setStepSize(0.1);
            limitrateModel.setStepSize(0.1);
            stopDiffModel.setStepSize(0.1);
            limitDiffModel.setStepSize(0.1);
        }

    }//GEN-LAST:event_mktDialogSymbolActionPerformed

    private void usdjpyBidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usdjpyBidButtonActionPerformed
        // TODO add your handling code here:
        int usdjpyBidOrderQty = (Integer) usdjpyQty.getValue();

        String sidein = "2";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("USD/JPY");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("jpy");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(usdjpyBidOrderQty);

        MktOrder.setPrice(usdjpyBid);

        MktOrder.setOtherPrice(usdjpyAsk);

        Gson gson = new Gson();
        String usdjpyBidData = gson.toJson(MktOrder);

        System.out.println(usdjpyBidData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_usdjpyBidButtonActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        if (newPwField.getText().length() <= 0) {
            JOptionPane.showMessageDialog(this, "New password cannot be null. Please check and re-enter.", "New Password Is Null", JOptionPane.ERROR_MESSAGE);
            oldPwField.setText(null);
            newPwField.setText(null);
            newPwAgField.setText(null);

        } else if (!(newPwField.getText().equals(newPwAgField.getText()))) {
            JOptionPane.showMessageDialog(this, "New passwords do not match. Please check and re-enter.", "New Passwords Not Match", JOptionPane.ERROR_MESSAGE);
            oldPwField.setText(null);
            newPwField.setText(null);
            newPwAgField.setText(null);

        } else {

            javax.swing.Icon icon = new javax.swing.ImageIcon((getClass().getResource("/imgpackage/Correct.png")));
            javax.swing.JOptionPane.showMessageDialog(this, "Your password has been successfully changeed.", "Password Changed Successful", javax.swing.JOptionPane.INFORMATION_MESSAGE, icon);
            ChangePwDialog.dispose();
        }

    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        ChangePwDialog.dispose();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        String userDataJson = controller.getUser(userId);
        JSONObject userData = new JSONObject(userDataJson);

        System.out.println(userData);

        String userfirstname = userData.getString("firstName");
        String userlastname = userData.getString("lastName");
        String userEmail = userData.getString("emailAddress");
        String address = userData.getString("address");
        boolean isVerified = userData.getBoolean("verified");
        String phone = userData.getString("phoneNumber");

        String name = userfirstname + " " + userlastname;

        viewAllName.setText(name);
        firstnameField.setText(userfirstname);
        lastnameField.setText(userlastname);
        emailField.setText(userEmail);
        changeAddrField.setText(address);
        changePhoneField.setText(phone);

        if (isVerified) {
            verifiedField.setForeground(new java.awt.Color(0, 207, 0));
            verifiedField.setText("Verified");
        } else {
            verifiedField.setForeground(new java.awt.Color(204, 0, 0));
            verifiedField.setText("Not Verified");
        }

        if (userData.isNull("responsibleUserId")) {
            administratorField.setText("");
        } else {
            String administratorId = userData.getString("responsibleUserId");
            System.out.println(controller.getUser(administratorId));
            String adminDataJson = controller.getUser(administratorId);
            JSONObject adminData = new JSONObject(adminDataJson);
            String adminfirstname = adminData.getString("firstName");
            String adminlastname = adminData.getString("lastName");
            administratorField.setText(adminfirstname + " " + adminlastname);
        }

        reportDialog.setLocationRelativeTo(this);
        reportDialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:

        String firstname = firstnameField.getText();
        String lastname = lastnameField.getText();
        String contactNo = changePhoneField.getText();
        boolean firstnameIsValid = false;
        boolean lastnameIsValid = false;
        int firstnameLength = firstname.length();
        int lastnameLength = lastname.length();

        //check for first name
        firstnameIsValid = firstname.matches("[a-zA-Z]*");
        lastnameIsValid = lastname.matches("[a-zA-z]+([ '-][a-zA-Z]+)*");

        //Check if contact number format is number
        boolean contactIsNo = false;

        try {
            Long.parseLong(contactNo);
            contactIsNo = true;
        } catch (NumberFormatException nfe) {
        }

        System.out.println("contactIsNo=" + contactIsNo);

        //check if length of contact number is between 10-14
        int numberLength = contactNo.length();
        boolean contactLength = false;

        if ((numberLength >= 10) && (numberLength <= 14)) {
            contactLength = true;
        }

        if ((!contactIsNo) || (!contactLength) || (!firstnameIsValid) || (!lastnameIsValid)) {
            if (((!firstnameIsValid) || (!lastnameIsValid)) && contactIsNo && contactLength) {
                String msg = "One or more of the input fields contained an invalid entry. \n\nYou must satisify the following constraint: \n\n<html><span style='color:red'><strong>&#9746 Firstname/Lastname cannot contain special character or be null. </strong></span></html>\n\n<html><span style='color:green'><strong>&#9745 Contact number should contain numbers only. </strong></span></html>\n\n<html><span style='color:green'><strong>&#9745 Contact number should be 10-14 characters. </strong></span></html>";
                JOptionPane.showMessageDialog(this, msg, "Input Invalid", JOptionPane.WARNING_MESSAGE);
            } else if (((!firstnameIsValid) || (!lastnameIsValid)) && (!contactIsNo) && contactLength) {
                String msg = "One or more of the input fields contained an invalid entry. \n\nYou must satisify the following constraint: \n\n<html><span style='color:red'><strong>&#9746 Firstname/Lastname cannot contain special character or be null. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should contain numbers only. </strong></span></html>\n\n<html><span style='color:green'><strong>&#9745 Contact number should be 10-14 characters. </strong></span></html>";
                JOptionPane.showMessageDialog(this, msg, "Input Invalid", JOptionPane.WARNING_MESSAGE);
            } else if (((!firstnameIsValid) || (!lastnameIsValid)) && (!contactIsNo) && (!contactLength)) {
                String msg = "One or more of the input fields contained an invalid entry. \n\nYou must satisify the following constraint: \n\n<html><span style='color:red'><strong>&#9746 Firstname/Lastname cannot contain special character or be null. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should contain numbers only. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should be 10-14 characters. </strong></span></html>";
                JOptionPane.showMessageDialog(this, msg, "Input Invalid", JOptionPane.WARNING_MESSAGE);
            } else if (((!firstnameIsValid) || (!lastnameIsValid)) && contactIsNo && (!contactLength)) {
                String msg = "One or more of the input fields contained an invalid entry. \n\nYou must satisify the following constraint: \n\n<html><span style='color:red'><strong>&#9746 Firstname/Lastname cannot contain special character or be null. </strong></span></html>\n\n<html><span style='color:green'><strong>&#9745 Contact number should contain numbers only. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should be 10-14 characters. </strong></span></html>";
                JOptionPane.showMessageDialog(this, msg, "Input Invalid", JOptionPane.WARNING_MESSAGE);
            } else if (firstnameIsValid && lastnameIsValid && (!contactIsNo) && contactLength) {
                String msg = "One or more of the input fields contained an invalid entry. \n\nYou must satisify the following constraint: \n\n<html><span style='color:green'><strong>&#9746 Firstname/Lastname cannot contain special character or be null. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should contain numbers only. </strong></span></html>\n\n<html><span style='color:green'><strong>&#9745 Contact number should be 10-14 characters. </strong></span></html>";
                JOptionPane.showMessageDialog(this, msg, "Input Invalid", JOptionPane.WARNING_MESSAGE);
            } else if (firstnameIsValid && lastnameIsValid && (!contactIsNo) && (!contactLength)) {
                String msg = "One or more of the input fields contained an invalid entry. \n\nYou must satisify the following constraint: \n\n<html><span style='color:green'><strong>&#9746 Firstname/Lastname cannot contain special character or be null. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should contain numbers only. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should be 10-14 characters. </strong></span></html>";
                JOptionPane.showMessageDialog(this, msg, "Input Invalid", JOptionPane.WARNING_MESSAGE);
            } else if (firstnameIsValid && lastnameIsValid && contactIsNo && (!contactLength)) {
                String msg = "One or more of the input fields contained an invalid entry. \n\nYou must satisify the following constraint: \n\n<html><span style='color:green'><strong>&#9746 Firstname/Lastname cannot contain special character or be null. </strong></span></html>\n\n<html><span style='color:green'><strong>&#9745 Contact number should contain numbers only. </strong></span></html>\n\n<html><span style='color:red'><strong>&#9745 Contact number should be 10-14 characters. </strong></span></html>";
                JOptionPane.showMessageDialog(this, msg, "Input Invalid", JOptionPane.WARNING_MESSAGE);
            }
        } else {

            UpdateUserRequest update = new UpdateUserRequest();
            if (firstnameField.getText().length() != 0) {
                update.setFirstName(firstnameField.getText());
            }
            if (lastnameField.getText().length() != 0) {
                update.setLastName(lastnameField.getText());
            }
            if (changePhoneField.getText().length() != 0) {
                try {
                    Long.parseLong(changePhoneField.getText());
                } catch (NumberFormatException nfe) {
                    //show error message
                }
                update.setPhoneNumber(changePhoneField.getText());
            }

            if (emailField.getText().length() != 0) {
                update.setEmailAddress(emailField.getText());
            }

            if (changeAddrField.getText().length() != 0) {
                update.setAddress(changeAddrField.getText());
            }

            Gson gson = new Gson();
            String changeUserData = gson.toJson(update);

            System.out.println("modify user with \n" + changeUserData);
            String updateUserId = controller.updateUser(changeUserData, userId);

            if (updateUserId != null) {

                changeUserData = controller.getUser(updateUserId);

                System.out.println(changeUserData);
            }

            if (updateUserId != "") {

                reportDialog.dispose();
                javax.swing.Icon icon = new javax.swing.ImageIcon((getClass().getResource("/imgpackage/Correct.png")));
                String msg = "Your profile has been successfully updated.";
                javax.swing.JOptionPane.showMessageDialog(this, msg, "Modification Successful", javax.swing.JOptionPane.INFORMATION_MESSAGE, icon);

            }
        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void gbpusdBidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gbpusdBidButtonActionPerformed
        // TODO add your handling code here:
        int gbpusdBidOrderQty = (Integer) gbpusdQty.getValue();

        String sidein = "2";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("GBP/USD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("usd");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(gbpusdBidOrderQty);

        MktOrder.setPrice(gbpusdBid);

        MktOrder.setOtherPrice(gbpusdAsk);

        Gson gson = new Gson();
        String gbpusdBidData = gson.toJson(MktOrder);

        System.out.println(gbpusdBidData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_gbpusdBidButtonActionPerformed

    private void gbpusdOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gbpusdOfferButtonActionPerformed
        // TODO add your handling code here:
        int gbpusdAskOrderQty = (Integer) gbpusdQty.getValue();

        String sidein = "1";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("GBP/USD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("usd");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(gbpusdAskOrderQty);

        MktOrder.setPrice(gbpusdAsk);

        MktOrder.setOtherPrice(gbpusdBid);

        Gson gson = new Gson();
        String gbpusdAskData = gson.toJson(MktOrder);

        System.out.println(side);

        System.out.println(gbpusdAskData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_gbpusdOfferButtonActionPerformed

    private void usdjpyOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usdjpyOfferButtonActionPerformed
        // TODO add your handling code here:
        int usdjpyAskOrderQty = (Integer) usdjpyQty.getValue();

        String sidein = "1";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("USD/JPY");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("jpy");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(usdjpyAskOrderQty);

        MktOrder.setPrice(usdjpyAsk);

        MktOrder.setOtherPrice(usdjpyBid);

        Gson gson = new Gson();
        String usdjpyAskData = gson.toJson(MktOrder);

        System.out.println(side);

        System.out.println(usdjpyAskData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_usdjpyOfferButtonActionPerformed

    private void audusdOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audusdOfferButtonActionPerformed
        // TODO add your handling code here:
        int audusdAskOrderQty = (Integer) audusdQty.getValue();

        String sidein = "1";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("AUD/USD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("usd");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(audusdAskOrderQty);

        MktOrder.setPrice(audusdAsk);

        MktOrder.setOtherPrice(audusdBid);

        Gson gson = new Gson();
        String audusdAskData = gson.toJson(MktOrder);

        System.out.println(side);

        System.out.println(audusdAskData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_audusdOfferButtonActionPerformed

    private void usdcadOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usdcadOfferButtonActionPerformed
        // TODO add your handling code here:
        int usdcadAskOrderQty = (Integer) usdcadQty.getValue();

        String sidein = "1";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("USD/CAD");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("cad");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(usdcadAskOrderQty);

        MktOrder.setPrice(usdcadAsk);

        MktOrder.setOtherPrice(usdcadBid);

        Gson gson = new Gson();
        String usdcadAskData = gson.toJson(MktOrder);

        System.out.println(side);

        System.out.println(usdcadAskData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_usdcadOfferButtonActionPerformed

    private void usdchfOfferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usdchfOfferButtonActionPerformed
        // TODO add your handling code here:
        int usdchfAskOrderQty = (Integer) usdchfQty.getValue();

        String sidein = "1";

        char side = sidein.charAt(0);

        Double stop = null;

        Double limit = null;

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stop);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol("USD/CHF");

        MktOrder.setUserID(userId);

        MktOrder.setCurrency("chf");

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(usdchfAskOrderQty);

        MktOrder.setPrice(usdchfAsk);

        MktOrder.setOtherPrice(usdchfBid);

        Gson gson = new Gson();
        String usdchfAskData = gson.toJson(MktOrder);

        System.out.println(side);

        System.out.println(usdchfAskData);

        websocket.sendTestTrade(MktOrder);


    }//GEN-LAST:event_usdchfOfferButtonActionPerformed

    private void mktTradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mktTradeButtonActionPerformed
        // TODO add your handling code here:
        int mktOrderSize = (Integer) mktDialogSize.getValue();

        int symbolIndex = mktDialogSymbol.getSelectedIndex();

        String symbol = "";
        String currency = "";
        String sidein = null;
        double price = 0;
        Double stopLoss = null;
        Double limit = null;

        if (symbolIndex == 0) {
            symbol = "EUR/USD";
            currency = "usd";
            if (mktDialogSell.isSelected()) {
                sidein = "1";
                MktOrder.setPrice(eurusdBid);
            } else {
                MktOrder.setPrice(eurusdAsk);
                sidein = "0";
            }
        } else if (symbolIndex == 1) {
            symbol = "GBP/USD";
            currency = "usd";
            if (mktDialogSell.isSelected()) {
                sidein = "1";
                MktOrder.setPrice(gbpusdBid);
            } else {
                sidein = "0";
                MktOrder.setPrice(gbpusdAsk);
            }
        } else if (symbolIndex == 2) {
            symbol = "USD/JPY";
            currency = "jpy";
            if (mktDialogSell.isSelected()) {
                sidein = "1";
                MktOrder.setPrice(usdjpyBid);
            } else {
                sidein = "0";
                MktOrder.setPrice(usdjpyAsk);
            }
        } else if (symbolIndex == 3) {
            symbol = "AUD/USD";
            currency = "usd";
            if (mktDialogSell.isSelected()) {
                sidein = "1";
                MktOrder.setPrice(audusdBid);
            } else {
                sidein = "0";
                MktOrder.setPrice(audusdAsk);
            }
        } else if (symbolIndex == 4) {
            symbol = "USD/CAD";
            currency = "cad";
            if (mktDialogSell.isSelected()) {
                sidein = "1";
                MktOrder.setPrice(usdcadBid);
            } else {
                sidein = "0";
                MktOrder.setPrice(usdcadAsk);
            }
        } else if (symbolIndex == 5) {
            symbol = "USD/CHF";
            currency = "chf";
            if (mktDialogSell.isSelected()) {
                sidein = "1";
                MktOrder.setPrice(usdchfBid);
            } else {
                sidein = "0";
                MktOrder.setPrice(usdchfAsk);
            }
        }

        if (mktDialogStop.isSelected()) {
            stopLoss = (Double) mktStopRate.getValue();
        }

        if (mktDialogLimit.isSelected()) {
            limit = (Double) mktLimitRate.getValue();
        }

        char side = sidein.charAt(0);

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setTimestamp(timestamp);

        MktOrder.setStopLoss(stopLoss);

        MktOrder.setTakeProfit(limit);

        MktOrder.setSymbol(symbol);

        MktOrder.setUserID(userId);

        MktOrder.setCurrency(currency);

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(mktOrderSize);

        Gson gson = new Gson();
        String mktTradeData = gson.toJson(MktOrder);

        System.out.println(mktTradeData);

        websocket.sendTestTrade(MktOrder);

        TradeMktDialog.dispose();

    }//GEN-LAST:event_mktTradeButtonActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        int entryOrderSize = (Integer) entrySize.getValue();

        int symbolIndex = entrySymbol.getSelectedIndex();

        String symbol = "";
        String currency = "";
        String sidein = null;
        double price = (double) entryPrice.getValue();;
        Double stopLoss = null;
        Double limit = null;

        if (symbolIndex == 0) {
            symbol = "EUR/USD";
            currency = "usd";
        } else if (symbolIndex == 1) {
            symbol = "GBP/USD";
            currency = "usd";
        } else if (symbolIndex == 2) {
            symbol = "USD/JPY";
            currency = "jpy";
        } else if (symbolIndex == 3) {
            symbol = "AUD/USD";
            currency = "usd";
        } else if (symbolIndex == 4) {
            symbol = "USD/CAD";
            currency = "cad";
        } else if (symbolIndex == 5) {
            symbol = "USD/CHF";
            currency = "chf";
        }

        if (entrySell.isSelected()) {
            sidein = "1";
        } else {
            sidein = "0";
        }

        if (entryStop.isSelected()) {
            stopLoss = (Double) entryStopRate.getValue();
        }

        if (entryLimit.isSelected()) {
            limit = (Double) entryLimitRate.getValue();
        }

        char side = sidein.charAt(0);

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
        String timestamp = sdf.format(cal.getTime());

        MktOrder.setStopLoss(stopLoss);

        MktOrder.setTakeProfit(limit);

        MktOrder.setTimestamp(timestamp);

        MktOrder.setSymbol(symbol);

        MktOrder.setPrice(price);

        MktOrder.setUserID(userId);

        MktOrder.setCurrency(currency);

        MktOrder.setSide(side);

        MktOrder.setAccountID(accountId);

        MktOrder.setQty(entryOrderSize);

        Gson gson = new Gson();
        String mktTradeData = gson.toJson(MktOrder);

        System.out.println(mktTradeData);

        websocket.sendTestTrade(MktOrder);

        EntryDialog.dispose();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void entrySymbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrySymbolActionPerformed
        // TODO add your handling code here:
        SpinnerNumberModel rateModel = (SpinnerNumberModel) entryPrice.getModel();
        rateModel.setStepSize(0.001);
        SpinnerNumberModel stoprateModel = (SpinnerNumberModel) entryStopRate.getModel();
        stoprateModel.setStepSize(0.001);
        SpinnerNumberModel limitrateModel = (SpinnerNumberModel) entryLimitRate.getModel();
        limitrateModel.setStepSize(0.001);
        SpinnerNumberModel stopDiffModel = (SpinnerNumberModel) entryStopDiff.getModel();
        stopDiffModel.setStepSize(0.001);
        SpinnerNumberModel limitDiffModel = (SpinnerNumberModel) entryLimitDiff.getModel();
        limitDiffModel.setStepSize(0.001);
        JSpinner.NumberEditor numberEditor = new JSpinner.NumberEditor(entryPrice, "0.00000");;
        JSpinner.NumberEditor stopnumberEditor = new JSpinner.NumberEditor(entryStopRate, "0.00000");;
        JSpinner.NumberEditor limitnumberEditor = new JSpinner.NumberEditor(entryLimitRate, "0.00000");;
        JSpinner.NumberEditor stopDiffnumberEditor = new JSpinner.NumberEditor(entryStopDiff, "0.00000");;
        JSpinner.NumberEditor limitDiffnumberEditor = new JSpinner.NumberEditor(entryLimitDiff, "0.00000");;

        if (entrySymbol.getSelectedIndex() == 0) {

            if (entrySell.isSelected()) {
                entryPrice.setValue(eurusdBid);
            } else if (entryBuy.isSelected()) {
                entryPrice.setValue(eurusdAsk);;
            }
        } else if (entrySymbol.getSelectedIndex() == 1) {

            if (entrySell.isSelected()) {
                entryPrice.setValue(gbpusdBid);
            } else if (entryBuy.isSelected()) {
                entryPrice.setValue(gbpusdAsk);;
            }
        } else if (entrySymbol.getSelectedIndex() == 2) {
            numberEditor = new JSpinner.NumberEditor(entryPrice, "0.000");
            stopnumberEditor = new JSpinner.NumberEditor(entryStopRate, "0.000");
            limitnumberEditor = new JSpinner.NumberEditor(entryLimitRate, "0.000");
            stopDiffnumberEditor = new JSpinner.NumberEditor(entryStopDiff, "0.000");
            limitDiffnumberEditor = new JSpinner.NumberEditor(entryLimitDiff, "0.000");
            rateModel.setStepSize(0.1);
            stoprateModel.setStepSize(0.1);
            limitrateModel.setStepSize(0.1);
            stopDiffModel.setStepSize(0.1);
            limitDiffModel.setStepSize(0.1);
            if (entrySell.isSelected()) {
                entryPrice.setValue(usdjpyBid);
            } else if (entryBuy.isSelected()) {
                entryPrice.setValue(usdjpyAsk);;
            }
        } else if (entrySymbol.getSelectedIndex() == 3) {

            if (entrySell.isSelected()) {
                entryPrice.setValue(audusdBid);
            } else if (entryBuy.isSelected()) {
                entryPrice.setValue(audusdAsk);;
            }
        } else if (entrySymbol.getSelectedIndex() == 4) {

            if (entrySell.isSelected()) {
                entryPrice.setValue(usdcadBid);
            } else if (entryBuy.isSelected()) {
                entryPrice.setValue(usdcadAsk);;
            }
        } else if (entrySymbol.getSelectedIndex() == 5) {

            if (entrySell.isSelected()) {
                entryPrice.setValue(usdchfBid);
            } else if (entryBuy.isSelected()) {
                entryPrice.setValue(usdchfAsk);;
            }
        }
        entryPrice.setEditor(numberEditor);
        entryStopRate.setEditor(stopnumberEditor);
        entryLimitRate.setEditor(limitnumberEditor);
        entryStopDiff.setEditor(stopDiffnumberEditor);
        entryLimitDiff.setEditor(limitDiffnumberEditor);
    }//GEN-LAST:event_entrySymbolActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            Desktop.getDesktop().browse(new URL("http://104.155.25.165:8080/services/forgot_password.html").toURI());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        pendingselectedRowIndex = pendingTable.getSelectedRow();

        if (posselectedRowIndex == -1) {

            javax.swing.JOptionPane.showMessageDialog(this, "Please select one pending position on the pending orders table below.", "Selection Invalid", javax.swing.JOptionPane.WARNING_MESSAGE);

        } else {
            int dialogButton = javax.swing.JOptionPane.YES_NO_OPTION;
            dialogButton = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel this pending trading?", "Cancel Pending Trading", dialogButton);

            if (dialogButton == javax.swing.JOptionPane.YES_OPTION) {
            } else if (dialogButton == javax.swing.JOptionPane.NO_OPTION) {
                remove(dialogButton);
            }
        }

    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cancelAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAllButtonActionPerformed
        // TODO add your handling code here:

        int pendingCount = pendingTable.getRowCount();

        if (pendingCount == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "There is no available pending order to be cancelled.", "No Pending Order Available", javax.swing.JOptionPane.WARNING_MESSAGE);
        } else {
            int dialogButton = javax.swing.JOptionPane.YES_NO_OPTION;
            dialogButton = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel all pending tradings?", "Cancel All Pending Tradings", dialogButton);

            if (dialogButton == javax.swing.JOptionPane.YES_OPTION) {
            } else if (dialogButton == javax.swing.JOptionPane.NO_OPTION) {
                remove(dialogButton);
            }
        }

//pendingtableModel.addRow(new Object[]{null, null, null, null, null, null});
    }//GEN-LAST:event_cancelAllButtonActionPerformed

    private void editTradeOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTradeOkActionPerformed
        // TODO add your handling code here:
        String orderId = (String) posTable.getValueAt(posselectedRowIndex, 0);

        String symbol = (String) posTable.getValueAt(posselectedRowIndex, 2);
        int size = (int) posTable.getValueAt(posselectedRowIndex, 3);
        String side = (String) posTable.getValueAt(posselectedRowIndex, 4);
        String currency = symbol.substring(Math.max(0, symbol.length() - 3));
        Double oldStopPrice = (Double) posTable.getValueAt(posselectedRowIndex, 6);
        Double oldLimitPrice = (Double) posTable.getValueAt(posselectedRowIndex, 7);
        String sidein = null;

        if (entrySell.isSelected()) {
            sidein = "1";
        } else {
            sidein = "0";
        }

        char buysell = sidein.charAt(0);

        Double newStopPrice = null;
        Double newLimitPrice = null;

        if (editStop.isSelected()) {
            newStopPrice = (Double) editStopRate.getValue();
        }

        if (editLimit.isSelected()) {
            newLimitPrice = (Double) editLimitRate.getValue();
        }
        editOrder.setTradeId(orderId);
        editOrder.setQty(size);
        editOrder.setSide(sidein.charAt(0));
        editOrder.setSymbol(symbol);
        editOrder.setSide(buysell);
        editOrder.setUserId(userId);
        if(newLimitPrice != null){
            editOrder.setOldLimitPrice(oldLimitPrice);
            editOrder.setNewLimitPrice(newLimitPrice);
        }
        if(newStopPrice != null){
            editOrder.setOldStopPrice(oldStopPrice);
            editOrder.setNewStopPrice(newStopPrice);
        }
        
        editOrder.setCurrency(currency);
        
        //need to set trader Id here

        Gson gson = new Gson();
        String editData = gson.toJson(editOrder);

        System.out.println(editData);

        websocket.sendEditTrade(editOrder);

        javax.swing.JOptionPane.showMessageDialog(this, "The open trading is editing. It will be changed from your open positions table when finished.");
    }//GEN-LAST:event_editTradeOkActionPerformed

    private void editTradeCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTradeCancelActionPerformed
        // TODO add your handling code here:
        editTradeDialog.dispose();
    }//GEN-LAST:event_editTradeCancelActionPerformed

    private void editStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editStopActionPerformed

    private void editLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editLimitActionPerformed

    /**
     * @param args the command line arguments
     */
    public void updatePosTable(Long tradeTime, String symbol, int size, boolean isBuy, Double price) {
        String buyOrSell = null;
        if (isBuy) {
            buyOrSell = "Buy";
        } else {
            buyOrSell = "Sell";
        }
        ((DefaultTableModel) posTable.getModel()).addRow(new Object[]{tradeTime, symbol, size, buyOrSell, price});
    }

    public javax.swing.JButton[] updatePriceField(String sym, Double bidPrice, Double offerPrice) {

        //EUR/USD
        if (sym.contains("EUR/USD")) {

            //jTable1.setValueAt(offerPrice, 0, 2);
            eurusdBid = bidPrice;
            eurusdAsk = offerPrice;
            String eurusdBidS = Double.toString(bidPrice);
            String eurusdAskS = Double.toString(offerPrice);

            //set market values for trade at market dialog
            if (mktDialogSymbol.getSelectedIndex() == 0) {
                if (mktDialogSell.isSelected()) {
                    mktDialogRate.setText(eurusdBidS);
                    stopMktPrice.setText(eurusdBidS);
                    limitMktPrice.setText(eurusdBidS);
                } else if (mktDialogBuy.isSelected()) {
                    mktDialogRate.setText(eurusdAskS);
                    stopMktPrice.setText(eurusdAskS);
                    limitMktPrice.setText(eurusdAskS);

                }
            }

            String[] eurusdBidArrpre = eurusdBidS.split("");
            String[] eurusdBidArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < eurusdBidArrpre.length; i++) {
                eurusdBidArr[i] = eurusdBidArrpre[i];
            }

            String[] eurusdAskArrpre = eurusdAskS.split("");
            String[] eurusdAskArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < eurusdAskArrpre.length; i++) {
                eurusdAskArr[i] = eurusdAskArrpre[i];
            }

            eurusdBidButton.setText("<html><b><font size=\"4\">" + eurusdBidArr[0] + eurusdBidArr[1] + eurusdBidArr[2] + eurusdBidArr[3] + "</font>" + "<font size=\"7\">" + eurusdBidArr[4] + eurusdBidArr[5] + "</font><font size=\"5\"><sup>" + eurusdBidArr[6] + "</sup></font></b></html>");
            eurusdOfferButton.setText("<html><b><font size=\"4\">" + eurusdAskArr[0] + eurusdAskArr[1] + eurusdAskArr[2] + eurusdAskArr[3] + "</font>" + "<font size=\"7\">" + eurusdAskArr[4] + eurusdAskArr[5] + "</font><font size=\"5\"><sup>" + eurusdAskArr[6] + "</sup></font></b></html>");
        } //AUD/USD
        else if (sym.contains("AUD/USD")) {
            //jTable1.setValueAt(bidPrice, 3, 1);
            //jTable1.setValueAt(offerPrice, 3, 2);
            audusdBid = bidPrice;
            audusdAsk = offerPrice;
            String audusdBid = Double.toString(bidPrice);
            String audusdAsk = Double.toString(offerPrice);

            String[] audusdBidArrpre = audusdBid.split("");
            String[] audusdBidArr = {"0", "0", "0", "0", "0", "0", "0"};

            //set market values for trade at market dialog
            if (mktDialogSymbol.getSelectedIndex() == 3) {
                if (mktDialogSell.isSelected()) {
                    mktDialogRate.setText(audusdBid);
                } else if (mktDialogBuy.isSelected()) {
                    mktDialogRate.setText(audusdAsk);
                }
            }

            for (int i = 0; i < audusdBidArrpre.length; i++) {
                audusdBidArr[i] = audusdBidArrpre[i];
            }

            String[] audusdAskArrpre = audusdAsk.split("");
            String[] audusdAskArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < audusdAskArrpre.length; i++) {
                audusdAskArr[i] = audusdAskArrpre[i];
            }

            audusdBidButton.setText("<html><b><font size=\"4\">" + audusdBidArr[0] + audusdBidArr[1] + audusdBidArr[2] + audusdBidArr[3] + "</font>" + "<font size=\"7\">" + audusdBidArr[4] + audusdBidArr[5] + "</font><font size=\"5\"><sup>" + audusdBidArr[6] + "</sup></font></b></html>");
            audusdOfferButton.setText("<html><b><font size=\"4\">" + audusdAskArr[0] + audusdAskArr[1] + audusdAskArr[2] + audusdAskArr[3] + "</font>" + "<font size=\"7\">" + audusdAskArr[4] + audusdAskArr[5] + "</font><font size=\"5\"><sup>" + audusdAskArr[6] + "</sup></font></b></html>");
        } //GBP/USD
        else if (sym.contains("GBP/USD")) {
            //jTable1.setValueAt(bidPrice, 1, 1);
            //jTable1.setValueAt(offerPrice, 1, 2);
            gbpusdBid = bidPrice;
            gbpusdAsk = offerPrice;
            String gbpusdBid = Double.toString(bidPrice);
            String gbpusdAsk = Double.toString(offerPrice);

            //set market values for trade at market dialog
            if (mktDialogSymbol.getSelectedIndex() == 1) {
                if (mktDialogSell.isSelected()) {
                    mktDialogRate.setText(gbpusdBid);
                } else if (mktDialogBuy.isSelected()) {
                    mktDialogRate.setText(gbpusdAsk);
                }
            }

            String[] gbpusdBidArrpre = gbpusdBid.split("");
            String[] gbpusdBidArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < gbpusdBidArrpre.length; i++) {
                gbpusdBidArr[i] = gbpusdBidArrpre[i];
            }

            String[] gbpusdAskArrpre = gbpusdAsk.split("");
            String[] gbpusdAskArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < gbpusdAskArrpre.length; i++) {
                gbpusdAskArr[i] = gbpusdAskArrpre[i];
            }

            gbpusdBidButton.setText("<html><b><font size=\"4\">" + gbpusdBidArr[0] + gbpusdBidArr[1] + gbpusdBidArr[2] + gbpusdBidArr[3] + "</font>" + "<font size=\"7\">" + gbpusdBidArr[4] + gbpusdBidArr[5] + "</font><font size=\"5\"><sup>" + gbpusdBidArr[6] + "</sup></font></b></html>");
            gbpusdOfferButton.setText("<html><b><font size=\"4\">" + gbpusdAskArr[0] + gbpusdAskArr[1] + gbpusdAskArr[2] + gbpusdAskArr[3] + "</font>" + "<font size=\"7\">" + gbpusdAskArr[4] + gbpusdAskArr[5] + "</font><font size=\"5\"><sup>" + gbpusdAskArr[6] + "</sup></font></b></html>");
        } //USD/CHF
        else if (sym.contains("USD/CHF")) {
            //jTable1.setValueAt(bidPrice, 5, 1);
            //jTable1.setValueAt(offerPrice, 5, 2);
            usdchfBid = bidPrice;
            usdchfAsk = offerPrice;
            String usdchfBid = Double.toString(bidPrice);
            String usdchfAsk = Double.toString(offerPrice);

            //set market values for trade at market dialog
            if (mktDialogSymbol.getSelectedIndex() == 5) {
                if (mktDialogSell.isSelected()) {
                    mktDialogRate.setText(usdchfBid);
                } else if (mktDialogBuy.isSelected()) {
                    mktDialogRate.setText(usdchfAsk);
                }
            }

            String[] usdchfBidArrpre = usdchfBid.split("");
            String[] usdchfBidArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < usdchfBidArrpre.length; i++) {
                usdchfBidArr[i] = usdchfBidArrpre[i];
            }

            String[] usdchfAskArrpre = usdchfAsk.split("");
            String[] usdchfAskArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < usdchfAskArrpre.length; i++) {
                usdchfAskArr[i] = usdchfAskArrpre[i];
            }

            usdchfBidButton.setText("<html><b><font size=\"4\">" + usdchfBidArr[0] + usdchfBidArr[1] + usdchfBidArr[2] + usdchfBidArr[3] + "</font>" + "<font size=\"7\">" + usdchfBidArr[4] + usdchfBidArr[5] + "</font><font size=\"5\"><sup>" + usdchfBidArr[6] + "</sup></font></b></html>");
            usdchfOfferButton.setText("<html><b><font size=\"4\">" + usdchfAskArr[0] + usdchfAskArr[1] + usdchfAskArr[2] + usdchfAskArr[3] + "</font>" + "<font size=\"7\">" + usdchfAskArr[4] + usdchfAskArr[5] + "</font><font size=\"5\"><sup>" + usdchfAskArr[6] + "</sup></font></b></html>");
        } //USD/CAD
        else if (sym.contains("USD/CAD")) {
            //jTable1.setValueAt(bidPrice, 4, 1);
            //jTable1.setValueAt(offerPrice, 4, 2);
            usdcadBid = bidPrice;
            usdcadAsk = offerPrice;
            String usdcadBid = Double.toString(bidPrice);
            String usdcadAsk = Double.toString(offerPrice);

            //set market values for trade at market dialog
            if (mktDialogSymbol.getSelectedIndex() == 4) {
                if (mktDialogSell.isSelected()) {
                    mktDialogRate.setText(usdcadBid);
                } else if (mktDialogBuy.isSelected()) {
                    mktDialogRate.setText(usdcadAsk);
                }
            }

            String[] usdcadBidArrpre = usdcadBid.split("");
            String[] usdcadBidArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < usdcadBidArrpre.length; i++) {
                usdcadBidArr[i] = usdcadBidArrpre[i];
            }

            String[] usdcadAskArrpre = usdcadAsk.split("");
            String[] usdcadAskArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < usdcadAskArrpre.length; i++) {
                usdcadAskArr[i] = usdcadAskArrpre[i];
            }

            usdcadBidButton.setText("<html><b><font size=\"4\">" + usdcadBidArr[0] + usdcadBidArr[1] + usdcadBidArr[2] + usdcadBidArr[3] + "</font>" + "<font size=\"7\">" + usdcadBidArr[4] + usdcadBidArr[5] + "</font><font size=\"5\"><sup>" + usdcadBidArr[6] + "</sup></font></b></html>");
            usdcadOfferButton.setText("<html><b><font size=\"4\">" + usdcadAskArr[0] + usdcadAskArr[1] + usdcadAskArr[2] + usdcadAskArr[3] + "</font>" + "<font size=\"7\">" + usdcadAskArr[4] + usdcadAskArr[5] + "</font><font size=\"5\"><sup>" + usdcadAskArr[6] + "</sup></font></b></html>");
        } //USD/JPY
        else if (sym.contains("USD/JPY")) {
            //jTable1.setValueAt(bidPrice, 2, 1);
            //jTable1.setValueAt(offerPrice, 2, 2);
            usdjpyBid = bidPrice;
            usdjpyAsk = offerPrice;
            String usdjpyBid = Double.toString(bidPrice);
            String usdjpyAsk = Double.toString(offerPrice);

            //set market values for trade at market dialog
            if (mktDialogSymbol.getSelectedIndex() == 2) {
                if (mktDialogSell.isSelected()) {
                    mktDialogRate.setText(usdjpyBid);
                } else if (mktDialogBuy.isSelected()) {
                    mktDialogRate.setText(usdjpyAsk);
                }
            }

            String[] usdjpyBidArrpre = usdjpyBid.split("");
            String[] usdjpyBidArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < usdjpyBidArrpre.length; i++) {
                usdjpyBidArr[i] = usdjpyBidArrpre[i];
            }

            String[] usdjpyAskArrpre = usdjpyAsk.split("");
            String[] usdjpyAskArr = {"0", "0", "0", "0", "0", "0", "0"};

            for (int i = 0; i < usdjpyAskArrpre.length; i++) {
                usdjpyAskArr[i] = usdjpyAskArrpre[i];
            }

            usdjpyBidButton.setText("<html><b><font size=\"4\">" + usdjpyBidArr[0] + usdjpyBidArr[1] + usdjpyBidArr[2] + usdjpyBidArr[3] + "</font>" + "<font size=\"7\">" + usdjpyBidArr[4] + usdjpyBidArr[5] + "</font><font size=\"5\"><sup>" + usdjpyBidArr[6] + "</sup></font></b></html>");
            usdjpyOfferButton.setText("<html><b><font size=\"4\">" + usdjpyAskArr[0] + usdjpyAskArr[1] + usdjpyAskArr[2] + usdjpyAskArr[3] + "</font>" + "<font size=\"7\">" + usdjpyAskArr[4] + usdjpyAskArr[5] + "</font><font size=\"5\"><sup>" + usdjpyAskArr[6] + "</sup></font></b></html>");
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    /**
     * protected void realPrice() { Thread worker = new Thread() { public void
     * run() {
     *
     * // Simulate doing something useful.
     *
     *
     * while(true) { // Bad practice String eurusdBid = ""; String gbpusdBid =
     * ""; String usdjpyBid = ""; String audusdBid = ""; String usdcadBid = "";
     * String usdchfBid = "";
     *
     * String eurusdAsk = ""; try {
     * //consumeEventStream("http://localhost:8080/services/bpc/marketservice/stream_price?sym=eur/usd");
     * eurusdBid =
     * getPriceSingle("http://104.155.25.165:8080/services/bpc/marketservice/get_price?sym=eur/usd");
     * gbpusdBid =
     * getPriceSingle("http://104.155.25.165:8080/services/bpc/marketservice/get_price?sym=gbp/usd");
     * usdjpyBid =
     * getPriceSingle("http://104.155.25.165:8080/services/bpc/marketservice/get_price?sym=usd/jpy");
     * audusdBid =
     * getPriceSingle("http://104.155.25.165:8080/services/bpc/marketservice/get_price?sym=aud/usd");
     * usdcadBid =
     * getPriceSingle("http://104.155.25.165:8080/services/bpc/marketservice/get_price?sym=usd/cad");
     * usdchfBid =
     * getPriceSingle("http://104.155.25.165:8080/services/bpc/marketservice/get_price?sym=usd/chf");
     * } catch (Exception e) { // TODO Auto-generated catch block
     * e.printStackTrace(); }
     *
     *
     *
     * String[] eurusdBidArr = eurusdBid.split(""); String[] eurusdBidTar =
     * {"0","0","0","0","0","0","0"};
     *
     * for (int i = 0; i<eurusdBidArr.length; i++){ eurusdBidTar [i] =
     * eurusdBidArr[i]; }
     *
     *
     * String[] gbpusdBidArr = gbpusdBid.split(""); String[] gbpusdBidTar =
     * {"0","0","0","0","0","0","0"};
     *
     * for (int i = 0; i<gbpusdBidArr.length; i++){ gbpusdBidTar [i] =
     * gbpusdBidArr[i]; }
     *
     *
     * String[] usdjpyBidArr = usdjpyBid.split(""); String[] usdjpyBidTar =
     * {"0","0","0","0","0","0","0"};
     *
     * for (int i = 0; i<usdjpyBidArr.length; i++){ usdjpyBidTar [i] =
     * usdjpyBidArr[i]; }
     *
     *
     * String[] audusdBidArr = audusdBid.split(""); String[] audusdBidTar =
     * {"0","0","0","0","0","0","0"};
     *
     * for (int i = 0; i<audusdBidArr.length; i++){ audusdBidTar [i] =
     * audusdBidArr[i]; }
     *
     *
     * String[] usdcadBidArr = usdcadBid.split(""); String[] usdcadBidTar =
     * {"0","0","0","0","0","0","0"};
     *
     * for (int i = 0; i<usdcadBidArr.length; i++){ usdcadBidTar [i] =
     * usdcadBidArr[i]; }
     *
     *
     * String[] usdchfBidArr = usdchfBid.split(""); String[] usdchfBidTar =
     * {"0","0","0","0","0","0","0"};
     *
     * for (int i = 0; i<usdchfBidArr.length; i++){ usdchfBidTar [i] =
     * usdchfBidArr[i]; }
     *
     *
     *
     * jTable1.setModel(new javax.swing.table.DefaultTableModel( new Object [][]
     * { {"EUR/USD", eurusdBid, null, null, null, null}, {"GBP/USD", gbpusdBid,
     * null, null, null, null}, {"USDJPY", usdjpyBid, null, null, null, null},
     * {"AUD/USD", audusdBid, null, null, null, null}, {"USD/CAD", usdcadBid,
     * null, null, null, null}, {"USD/CHF", usdchfBid, null, null, null, null}
     * }, new String [] { "Symbol", "Sell", "Buy", "Spread", "High", "Low" } ));
     * *
     *
     * //Set market values for simple dealing rates table
     * jButton23.setText("<html><b><font size=\"4\">"+eurusdBidTar[0]+eurusdBidTar[1]+eurusdBidTar[2]+eurusdBidTar[3]+"
     * </font>"+"
     * <font size=\"7\">"+eurusdBidTar[4]+eurusdBidTar[5]+"
     * </font><font size=\"5\"><sup>"+eurusdBidTar[6]+"
     * </sup></font></b></html>");
     *
     * jButton25.setText("
     * <html><b><font size=\"4\">"+gbpusdBidTar[0]+gbpusdBidTar[1]+gbpusdBidTar[2]+gbpusdBidTar[3]+"
     * </font>"+"
     * <font size=\"7\">"+gbpusdBidTar[4]+gbpusdBidTar[5]+"
     * </font><font size=\"5\"><sup>"+gbpusdBidTar[6]+"
     * </sup></font></b></html>");
     *
     * jButton27.setText("
     * <html><b><font size=\"4\">"+usdjpyBidTar[0]+usdjpyBidTar[1]+usdjpyBidTar[2]+usdjpyBidTar[3]+"
     * </font>"+"
     * <font size=\"7\">"+usdjpyBidTar[4]+usdjpyBidTar[5]+"
     * </font><font size=\"5\"><sup>"+usdjpyBidTar[6]+"
     * </sup></font></b></html>");
     *
     * jButton29.setText("
     * <html><b><font size=\"4\">"+audusdBidTar[0]+audusdBidTar[1]+audusdBidTar[2]+audusdBidTar[3]+"</font>"+"<font size=\"7\">"+audusdBidTar[4]+audusdBidTar[5]+"</font><font size=\"5\"><sup>"+audusdBidTar[6]+"</sup></font></b></html>");
     *
     * jButton31.setText("<html><b><font size=\"4\">"+usdcadBidTar[0]+usdcadBidTar[1]+usdcadBidTar[2]+usdcadBidTar[3]+"</font>"+"<font size=\"7\">"+usdcadBidTar[4]+usdcadBidTar[5]+"</font><font size=\"5\"><sup>"+usdcadBidTar[6]+"</sup></font></b></html>");
     *
     * jButton33.setText("<html><b><font size=\"4\">"+usdchfBidTar[0]+usdchfBidTar[1]+usdchfBidTar[2]+usdchfBidTar[3]+"</font>"+"<font size=\"7\">"+usdchfBidTar[4]+usdchfBidTar[5]+"</font><font size=\"5\"><sup>"+usdchfBidTar[6]+"</sup></font></b></html>");
     *
     *
     *
     * //set market values for trade at market dialog if
     * (jComboBox1.getSelectedIndex()==0){ if(jRadioButton1.isSelected()){
     * jLabel7.setText(eurusdBid); } } else if
     * (jComboBox1.getSelectedIndex()==1){ jLabel7.setText(gbpusdBid); } else if
     * (jComboBox1.getSelectedIndex()==2){ jLabel7.setText(usdjpyBid); } else if
     * (jComboBox1.getSelectedIndex()==3){ jLabel7.setText(audusdBid); } else if
     * (jComboBox1.getSelectedIndex()==4){ jLabel7.setText(usdcadBid); } else if
     * (jComboBox1.getSelectedIndex()==5){ jLabel7.setText(usdchfBid); }
     *
     *
     * try { Thread.sleep(200); } catch (InterruptedException e) {
     *
     * }
     * }
     *
     * }
     * };
     *
     * worker.start(); } *
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TradingUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TradingUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TradingUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TradingUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TradingUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog ChangePw;
    private javax.swing.JDialog ChangePwDialog;
    private javax.swing.JDialog EntryDialog;
    private javax.swing.JDialog TradeMktDialog;
    private javax.swing.JTable accStatTable;
    private javax.swing.JDialog accountDialog;
    private javax.swing.JTabbedPane accountTables;
    private javax.swing.JLabel administratorField;
    private javax.swing.JTabbedPane allTable;
    private javax.swing.JTable allTradeTable;
    private javax.swing.JButton audusdBidButton;
    private javax.swing.JButton audusdOfferButton;
    private javax.swing.JSpinner audusdQty;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton buyButton;
    private javax.swing.JButton cancelAllButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable cancelTable;
    private javax.swing.JTextArea changeAddrField;
    private javax.swing.JTextField changePhoneField;
    private javax.swing.JButton closeButton;
    private javax.swing.JTable closedOrderTable;
    private javax.swing.JCheckBox editLimit;
    private javax.swing.JSpinner editLimitDiff;
    private javax.swing.JLabel editLimitGL;
    private javax.swing.JLabel editLimitMkt;
    private javax.swing.JSpinner editLimitRate;
    private javax.swing.JLabel editRate;
    private javax.swing.JLabel editSide;
    private javax.swing.JLabel editSize;
    private javax.swing.JCheckBox editStop;
    private javax.swing.JSpinner editStopDiff;
    private javax.swing.JLabel editStopGL;
    private javax.swing.JLabel editStopMkt;
    private javax.swing.JSpinner editStopRate;
    private javax.swing.JLabel editSymbol;
    private javax.swing.JButton editTradeCancel;
    private javax.swing.JDialog editTradeDialog;
    private javax.swing.JButton editTradeOk;
    private javax.swing.JLabel emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailLabel1;
    private javax.swing.JButton entryButton;
    private javax.swing.JRadioButton entryBuy;
    private javax.swing.JCheckBox entryLimit;
    private javax.swing.JSpinner entryLimitDiff;
    private javax.swing.JLabel entryLimitPrice;
    private javax.swing.JSpinner entryLimitRate;
    private javax.swing.JSpinner entryPrice;
    private javax.swing.JRadioButton entrySell;
    private javax.swing.JSpinner entrySize;
    private javax.swing.JCheckBox entryStop;
    private javax.swing.JSpinner entryStopDiff;
    private javax.swing.JLabel entryStopPrice;
    private javax.swing.JSpinner entryStopRate;
    private javax.swing.JComboBox entrySymbol;
    private javax.swing.JButton eurusdBidButton;
    private javax.swing.JButton eurusdOfferButton;
    private javax.swing.JLayeredPane eurusdPane;
    private javax.swing.JSpinner eurusdQty;
    private javax.swing.JTextField firstnameField;
    private javax.swing.JLabel firstnameLabel;
    private javax.swing.JButton gbpusdBidButton;
    private javax.swing.JButton gbpusdOfferButton;
    private javax.swing.JSpinner gbpusdQty;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane10;
    private javax.swing.JLayeredPane jLayeredPane11;
    private javax.swing.JLayeredPane jLayeredPane12;
    private javax.swing.JLayeredPane jLayeredPane8;
    private javax.swing.JLayeredPane jLayeredPane9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextField lastnameField;
    private javax.swing.JLabel lastnameLabel;
    private javax.swing.JLabel licenseDate;
    private javax.swing.JLabel licenseDate1;
    private javax.swing.JLabel licenseDate2;
    private javax.swing.JLabel licenseDays;
    private javax.swing.JLabel licenseDays1;
    private javax.swing.JLabel limitMktPrice;
    private javax.swing.JRadioButton mktDialogBuy;
    private javax.swing.JCheckBox mktDialogLimit;
    private javax.swing.JLabel mktDialogRate;
    private javax.swing.JRadioButton mktDialogSell;
    private javax.swing.JSpinner mktDialogSize;
    private javax.swing.JCheckBox mktDialogStop;
    private javax.swing.JComboBox mktDialogSymbol;
    private javax.swing.JSpinner mktLimitDiff;
    private javax.swing.JSpinner mktLimitRate;
    private javax.swing.JSpinner mktStopDiff;
    private javax.swing.JSpinner mktStopRate;
    private javax.swing.JButton mktTradeButton;
    private javax.swing.JButton myAccountButton;
    private javax.swing.JTextField newPwAgField;
    private javax.swing.JTextField newPwField;
    private javax.swing.JTextField oldPwField;
    private javax.swing.JTable pendingTable;
    private javax.swing.JTable posTable;
    private javax.swing.JDialog reportDialog;
    private javax.swing.JButton sellButton;
    private javax.swing.JLabel stopMktPrice;
    private javax.swing.JButton usdcadBidButton;
    private javax.swing.JButton usdcadOfferButton;
    private javax.swing.JSpinner usdcadQty;
    private javax.swing.JButton usdchfBidButton;
    private javax.swing.JButton usdchfOfferButton;
    private javax.swing.JSpinner usdchfQty;
    private javax.swing.JButton usdjpyBidButton;
    private javax.swing.JButton usdjpyOfferButton;
    private javax.swing.JSpinner usdjpyQty;
    private javax.swing.JLabel verifiedField;
    private javax.swing.JLabel verifiedLabel;
    private javax.swing.JLabel viewAllName;
    private javax.swing.JLabel viewAllName1;
    // End of variables declaration//GEN-END:variables
}
